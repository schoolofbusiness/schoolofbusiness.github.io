import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-56f1ebe4.js";const t={},o=e(`<h1 id="_7-tananyag" tabindex="-1"><a class="header-anchor" href="#_7-tananyag" aria-hidden="true">#</a> 7. tananyag</h1><h2 id="tinkercad" tabindex="-1"><a class="header-anchor" href="#tinkercad" aria-hidden="true">#</a> Tinkercad</h2><p>A Tinkercad széles körben elterjedt az oktatásban, mivel ideális eszköz a diákoknak, hogy megismerkedjenek az elektronika és a mérnöki tervezés alapjaival. Az online platform lehetővé teszi a diákok számára, hogy kreatívan kísérletezzenek, módosítsanak és teszteljenek elektronikai projekteket anélkül, hogy valósában eszközöket kellene összeszerelniük vagy drága hardvert kellene beszerezniük.</p><p>A Tinkercad emellett közösségi jellegű is, és lehetőséget nyújt a felhasználók számára, hogy megoszthassák és böngészhessék mások által készített projekteket, így inspirációt meríthetnek és tapasztalatot cserélhetnek egymással. Ez együttműködésre és tanulásra ösztönzi a közösség tagjait.</p><p>Az alkalmazás a felhő alapú tárolás és munkafolyamatokkal is rendelkezik, ami azt jelenti, hogy a tervezéseid mindig elérhetők és szinkronizálva vannak, függetlenül attól, hogy melyik eszközön vagy helyen dolgozol rajtuk. Ezenkívül a Tinkercad számos interaktív oktatóanyagot és tanfolyamot is kínál, amelyek segítenek a felhasználóknak megtanulni az elektronika és a 3D tervezés alapjait.</p><p>Összességében a Tinkercad egy egyszerűen használható, ingyenes eszköz, amely lehetővé teszi az emberek számára, hogy kreatívan fejleszthessék elektronikai és mérnöki készségeiket, és virtuálisan teszteljék ötleteiket anélkül, hogy bonyolult hardvert kellene beszerezniük vagy bonyolult szoftvereket kellene elsajátítaniuk.</p><h3 id="tinkercad-arduino" tabindex="-1"><a class="header-anchor" href="#tinkercad-arduino" aria-hidden="true">#</a> Tinkercad &lt;-&gt; Arduino</h3><p>A Tinkercad rendkívül sokoldalú lehetőségeket kínál az Arduino projektjeidhez. Az alkalmazás tartalmaz egy teljes Arduino kompatibilis könyvtárat, így könnyen hozzáadhatod az Arduino mikrovezérlőket az áramkörödhöz. A Tinkercad eszköztárában megtalálhatók a leggyakoribb Arduino modellek, például az <strong>Arduino UNO</strong>, Nano vagy Mega, továbbá megtalálhatók más elektronikai komponensek is, mint például LED-ek, ellenállások, érzékelők és aktuátorok. Ezeket egyszerűen hozzáadhatod az áramkörödhöz, majd a hozzájuk tartozó kapcsolási rajzokat könnyedén elkészítheted. Az Arduino kódolásához a Tinkercad egy beépített kódszerkesztőt kínál.</p><p>Ebben a kódszerkesztőben programozhatod az Arduino mikrovezérlődet, és láthatod a kód hatásait a szimulációban. A szimulációs funkció különösen hasznos, mivel lehetővé teszi az áramkör tesztelését és működésének előzetes megtekintését. Így láthatod, hogyan viselkedik az áramköröd, mielőtt a valóságban megépítenéd. Mind emellett lehetőséget kínál a projektjeid megosztására és ezenkívül böngészheted más felhasználók projektjeit is, így inspirációt meríthetsz és tanulhatsz másoktól. Az ingyenes oktatóanyagok és tanfolyamok szintén segítségedre lehetnek az Arduino és az elektronika terén való fejlődésben. Összességében a Tinkercad egy erőteljes eszköz az Arduino projektek tervezéséhez, fejlesztéséhez és tanulásához.</p><h2 id="mi-az-az-arduino" tabindex="-1"><a class="header-anchor" href="#mi-az-az-arduino" aria-hidden="true">#</a> Mi az az Arduino?</h2><p>Az Arduino egy rendkívül népszerű és széles körben alkalmazott kis méretű mikrovezérlő platform, amelyet főként elektronikai projektfejlesztők, mérnökök, művészek és hobbisták használnak világszerte. A platform hatalmas népszerűségét az egyszerűsége, a rugalmassága és az open-source jellege eredményezi.</p><p>Az Arduino projekt eredetileg 2005-ben indult azzal a céllal, hogy megkönnyítse az emberek számára a mikrokontrollerek programozását és az elektronika világában való kísérletezést. Az Arduino platformot olyan tervezési szempontok vezérlik, mint a könnyű használat, az alacsony költség és a közösségi támogatás. Ennek eredményeként a felhasználók számára könnyű hozzáférni az Arduino hardverhez és a hozzá tartozó szoftverekhez.</p><p>Az alapját egy kis, egyszerűen programozható mikrovezérlő, például az ATmega sorozat, képezi, amelyre egy speciális firmware-t telepítenek, hogy egyszerűsítse a programozást. Az Arduino mikrokontrollerek számos digitális és analóg bemeneti és kimeneti csatlakozóval rendelkeznek, amelyek lehetővé teszik az eszközök és szenzorok könnyű csatlakoztatását.</p><p>A programozás során az <strong>Arduino C/C++</strong> nyelvet használ, amely viszonylag egyszerű és könnyen tanulható. Az <strong>Arduino IDE</strong> (Integrated Development Environment) egy ingyenes, nyílt forráskódú szoftver, amely kifejezetten az Arduino projektek fejlesztésére készült. Ebben a fejlesztői környezetben lehetőség van a kód írására, feltöltésére a mikrovezérlőre, valamint a hibák ellenőrzésére és javítására.</p><p>Az Arduino széles körben használják olyan projektek létrehozására, mint okosotthon-vezérlőrendszerek, robotika, mérési eszközök, interaktív művészeti alkotások és prototípusok. Az erőssége a közösségi támogatásban rejlik, mivel számos projekt, könyv és oktatóanyag elérhető, amelyek segítenek a kezdőknek és a haladóknak egyaránt az Arduino használatának elsajátításában.</p><p>Az Arduino platform open-source, ami azt jelenti, hogy a hardver- és szoftvertervek nyilvánosak, és bárki módosíthatja és adaptálhatja őket saját projektekhez. Ez a nyitott megközelítés hozzájárul a folyamatos innovációhoz és a fejlesztők közösségének növekedéséhez, ami miatt az Arduino továbbra is egy népszerű és fontos eszköz az elektronika és a mikrokontrollerek világában.</p><h3 id="arduino-c-c-programozasi-nyelv" tabindex="-1"><a class="header-anchor" href="#arduino-c-c-programozasi-nyelv" aria-hidden="true">#</a> Arduino C/C++ programozási nyelv</h3><p>Az alap Arduino programkód, amelyet a legtöbb Arduino projekt kiindulópontjaként használnak, a következőképpen néz ki:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Setup rész: </span>
    <span class="token comment">// Itt inicializáljuk az áramkört </span>
    <span class="token comment">// és végrehajtjuk az egyszeri beállításokat.</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Loop rész: Itt található </span>
    <span class="token comment">// a folyamatosan ismétlődő kód.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a struktúra az Arduino projektek alapja, és lehetővé teszi a felhasználók számára, hogy könnyen és strukturált módon írják meg a programjaikat. A <code>setup()</code> blokkban elvégezett inicializációk segítenek felkészülni az áramkört a működésre, míg a <code>loop()</code> blokkban definiálhatjuk a kívánt működést, amely folyamatosan ismétlődik.</p><p><em>Továbbiakban ezt a két fő részt tárgyaljuk!</em></p><h3 id="void-setup" tabindex="-1"><a class="header-anchor" href="#void-setup" aria-hidden="true">#</a> <code>void setup() { }</code></h3><p>Az <code>void setup()</code> blokk az Arduino program egy része, amelyet egyszer hajtanak végre, amikor a mikrovezérlő elindul. A <code>setup()</code> függvénynek nincs visszatérési értéke (<code>void</code>), és a leggyakrabban az áramkör inicializálására és a kezdeti beállítások végrehajtására használják.</p><p>A <code>setup()</code> blokk számos feladatot végezhet, például:</p><ol><li><strong>Csatlakozók beállítása</strong>: A leggyakoribb felhasználása a digitális és analóg csatlakozók beállítása. Például a <code>pinMode()</code> függvény segítségével meghatározhatjuk, hogy egy adott pin kimenetként vagy bemenetként működjön.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13-as pin kimenetként használása</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Szenzorok inicializálása</strong>: Ha szenzorokat használunk az áramkörünkben, a <code>setup()</code> blokkban inicializálhatjuk ezeket a szenzorokat, például beállítva a kommunikációs protokollt vagy az érzékelési tartományt.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I2C kommunikáció inicializálása</span>
  lcd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD kijelző inicializálása (16 karakter, 2 sor)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Változók inicializálása</strong>: Változókat is inicializálhatunk a <code>setup()</code> blokkban, hogy előkészítsük azokat a későbbi használatra.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// LED vezérléséhez egy változó inicializálása</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>setup()</code> blokk lényege az, hogy az elején végzi el azokat a beállításokat és inicializációkat, amelyekre az áramkörnek szüksége van a működéshez. Miután a <code>setup()</code> függvény lefutott, az Arduino mikrovezérlő a <code>loop()</code> függvénybe lép, ahol a folyamatosan ismétlődő műveletek vannak végrehajtva.</p><h3 id="void-loop" tabindex="-1"><a class="header-anchor" href="#void-loop" aria-hidden="true">#</a> <code>void loop() { }</code></h3><p>Ez a rész folyamatosan ismétlődik, miután a <code>setup()</code> blokk lefutott. Itt található a fő működési kód, amelyet a mikrovezérlő ismételten végrehajt. Például itt lehet LED-eket villogtatni, adatokat olvasni szenzorokról, vagy bármilyen más folyamatosan futó feladatot végezni.</p><p>A <code>void loop()</code> blokk belsejében lévő kód folyamatosan fut, újra és újra, minden alkalommal, amikor az Arduino végzi a programot. Ez azt jelenti, hogy a benne lévő utasításokat ismételten és folyamatosan végrehajtja, amíg az Arduino bekapcsolva van vagy amíg a program nem kerül leállításra.</p><p>Itt néhány példa arra, hogy mire használható a <code>void loop()</code> blokk:</p><ol><li><strong>Szenzorolvasás és adatfeldolgozás</strong>: Lehetőséget nyújt szenzorok adatainak olvasására és feldolgozására. Például egy hőmérsékletszenzor adatainak olvasása és a hőmérséklet kijelzése.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Soros kommunikáció beállítása</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> homerseklet <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A0-es pinen található szenzor olvasása</span>
  <span class="token keyword">float</span> fahrenheit <span class="token operator">=</span> <span class="token punctuation">(</span>homerseklet <span class="token operator">*</span> <span class="token number">0.48876</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32.0</span><span class="token punctuation">;</span> <span class="token comment">// Fahrenheitban való átváltás</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Homerseklet (Celsius): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>homerseklet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; Celsius, Homerseklet (Fahrenheit): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>fahrenheit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; Fahrenheit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Várunk egy másodpercet</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Kimenet vezérlése</strong>: Lehetővé teszi kimenetek vezérlését, például LED-ek, motorok vagy relék kapcsolását, amelyekkel irányíthatod fizikai eszközöket vagy rendszereket.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// 13-as pin használata LED-hez</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LED pin kimenetként</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LED bekapcsolása</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Várakozás egy másodpercig</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LED kikapcsolása</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Várakozás egy másodpercig</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Kommunikáció</strong>: Kommunikálhat más eszközökkel, például számítógéppel vagy más Arduino mikrovezérlőkkel, soros porton vagy más kommunikációs csatornákon keresztül.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Soros kommunikáció beállítása</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, vilag!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Üzenet küldése a számítógépnek</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Várunk egy másodpercet</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>Vezérlő programok</strong>: Készíthetsz vezérlő programokat, amelyek folyamatosan figyelik az eseményeket vagy érzékelnek változásokat, és reagálnak rájuk.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> buttonPin <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2-es pin használata a gombhoz</span>
<span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// 13-as pin használata a LED-hez</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>buttonPin<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gomb pin beállítása bemenetként</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LED pin beállítása kimenetként</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> buttonState <span class="token operator">=</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span>buttonPin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gomb állapotának olvasása</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>buttonState <span class="token operator">==</span> HIGH<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ha a gomb lenyomva van, bekapcsoljuk a LED-et</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ha a gomb nincs lenyomva, kikapcsoljuk a LED-et</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezek a példakódok segíthetnek megérteni az Arduino void <strong>loop()</strong> blokk használatát különböző alkalmazási területeken. Az Arduino lehetőségek széles skáláját nyitja meg, és a C/C++ nyelven való programozás révén sokféle projektet hozhatsz létre.</p><p>A <code>void loop()</code> blokk gyakran tartalmaz ciklusokat (például <code>for</code> vagy <code>while</code>), elágazásokat (<code>if</code> vagy <code>switch</code>) és más vezérlési szerkezeteket, hogy a program viselkedése változatos és összetett legyen. Ez a blokk lehetővé teszi az Arduino programok folyamatos futtatását és a különböző események és feltételek kezelését, így sokféle alkalmazást valósíthatsz meg vele.</p>`,45),l=[o];function p(i,k){return a(),s("div",null,l)}const u=n(t,[["render",p],["__file","lesson7.html.vue"]]);export{u as default};
