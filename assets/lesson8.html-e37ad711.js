import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-56f1ebe4.js";const e={},p=t(`<h1 id="_8-tananyag" tabindex="-1"><a class="header-anchor" href="#_8-tananyag" aria-hidden="true">#</a> 8. tananyag</h1><h2 id="objektumok-letrehozasa-es-hasznalata" tabindex="-1"><a class="header-anchor" href="#objektumok-letrehozasa-es-hasznalata" aria-hidden="true">#</a> Objektumok létrehozása és használata</h2><p>Ebben a fejezetben</p><ul><li>Az objektumok megértése</li><li>Tulajdonságok és metódusok használata</li><li>Objektumok létrehozása</li><li>A pontjelölés használata</li><li>Az objektumokkal való munka</li></ul><p>Ebben a fejezetben megmutatjuk, miért érdemes objektumokat használni, hogyan használd őket, és milyen különleges képességekkel rendelkeznek, hogy jobbá tegyék a programjaidat és a programozásodat.</p><h3 id="az-objektum" tabindex="-1"><a class="header-anchor" href="#az-objektum" aria-hidden="true">#</a> Az Objektum</h3><p>Az öt primitív adattípuson kívül a JavaScriptnek van egy objektum nevű adattípusa is. A JavaScript objektumok újrafelhasználható komponensekbe kapszulázzák az adatokat és a funkciókat.</p><p>Ahhoz, hogy megértsük, mik az objektumok és hogyan működnek, hasznos, ha a JavaScript-objektumokat fizikai, valós dolgokkal hasonlítjuk össze. Vegyünk például egy gitárt.</p><p>Egy gitárnak vannak dolgai, amelyekből áll, és amelyeket csinál. Íme néhány tény a gitárról, amelyet a példánkhoz használunk:</p><ul><li>Hat húrja van.</li><li>Fekete és fehér.</li><li>Elektromos.</li><li>A teste tömör.</li></ul><p>Néhány dolog, amit ez a gitár tud (vagy amit a gitárral lehet csinálni) a következő:</p><ul><li>Húrokat pengetni</li><li>A hangerő növelése</li><li>Csökkentheti a hangerőt</li><li>A hangszín beállítása</li><li>Meghúzni a húrokat</li><li>Meg lazítani a húrokat</li></ul><p>Ha ez a gitár egy JavaScript-objektum lenne, nem pedig egy valós objektum, akkor azokat a dolgokat, amelyeket csinál, metódusoknak neveznénk, a gitárt alkotó dolgok pedig, mint például a húrok és a test típusa, a tulajdonságai lennének.</p><p>Az objektumok metódusait és tulajdonságait ugyanúgy írjuk le: név-érték párokként, a nevet és az értéket kettősponttal elválasztva. Ha egy tulajdonság értéke egy függvény, akkor azt metódusnak nevezzük.</p><div class="hint-container tip"><p class="hint-container-title">Megjegyzés</p><p>A valóságban egy objektumon belül minden egy tulajdonság. Egy függvényértékkel rendelkező tulajdonságot csak más néven hívunk: metódusnak.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> guitar <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">bodyColor</span><span class="token operator">:</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scratchPlateColor</span><span class="token operator">:</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">numberOfStrings</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">&quot;Yamaha&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bodyType</span><span class="token operator">:</span> <span class="token string">&quot;solid&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">strum</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">tune</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="objektumok-letrehozasa" tabindex="-1"><a class="header-anchor" href="#objektumok-letrehozasa" aria-hidden="true">#</a> Objektumok létrehozása</h2><p>A JavaScript kétféleképpen hozhat létre objektumokat:</p><ul><li>Egy objektum literál írásával.</li><li>Az objektum-konstruktor metódus használatával</li></ul><p>Hogy melyiket választjuk, az a körülményektől függ. A következő szakaszokban felfedezheted mindkettő előnyeit és hátrányait, valamint azt, hogy mikor melyik előnyösebb a másiknál.<br> a másikkal szemben.</p><h3 id="objektumok-definialasa-objektum-literalokkal" tabindex="-1"><a class="header-anchor" href="#objektumok-definialasa-objektum-literalokkal" aria-hidden="true">#</a> Objektumok definiálása objektum literálokkal</h3><p>Az objektumok létrehozásának objektumliterális módszere a <code>var</code> kulcsszó használatával egy szabványos változó definíciójával kezdődik, amelyet az <code>assignment</code> operátor követ:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Az utasítás jobb oldalán azonban kapcsos zárójelben vesszővel elválasztott név/érték párokat használ:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eyes</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">feet</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hands</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">eyeColor</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha nem tudod, hogy az objektum milyen tulajdonságokkal fog rendelkezni, amikor létrehozod, vagy ha a programod megköveteli, hogy később további tulajdonságokat adj hozzá, akkor létrehozhatod az objektumot kevés tulajdonsággal, vagy akár tulajdonságok nélkül is, és később hozzáadhatsz tulajdonságokat:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hair <span class="token operator">=</span> <span class="token string">&quot;brown&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az anyag korábbi példáiban szereplő metódusok többnyire szöveg kimenetére szolgálnak. A <code>document.write</code> és a <code>console.log</code> is ezt a módszert használja a tulajdonságok ponttal való elválasztására, így ez ismerős lehet. Az objektum neve és a tulajdonság között lévő pont azt jelzi, hogy a tulajdonság az adott objektumhoz tartozik. A pontjelöléssel részletesebben az később foglalkozunk.</p><p>Az objektumokkal kapcsolatban egy másik dolog, amit meg kell jegyeznünk, hogy a tömbökhöz hasonlóan az objektumok is tartalmazhatnak több különböző adattípust a tulajdonságok értékeiként.</p><div class="hint-container tip"><p class="hint-container-title">Megjegyzés</p><p>A JavaScript valódi megértésének nem túl jól őrzött titka, hogy a tömbök és függvények objektumtípusok, és hogy a szám, a karakterlánc és a Boolean primitív adattípusok szintén objektumként használhatók. Ez azt jelenti, hogy az objektumok összes tulajdonságával rendelkeznek, és ugyanúgy lehet hozzájuk tulajdonságokat rendelni, mint az objektumokhoz.</p></div><h3 id="objektumok-definialasa-object-konstruktorral" tabindex="-1"><a class="header-anchor" href="#objektumok-definialasa-object-konstruktorral" aria-hidden="true">#</a> Objektumok definiálása Object konstruktorral</h3><p>Az objektum definiálásának második módja az <code>Object</code> konstruktor használata. Ez a módszer új objektumként definiálja az objektumot, és feltölti azt tulajdonságokkal. Az <code>Object</code> konstruktor használatára egy példában láthatod.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Sandy&quot;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hair <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az objektumok létrehozására használható az <code>Object</code> konstruktor módszer, de általában az objektumok létrehozásának rosszabb módjának tekintik.</p><p>Ennek fő okai a következők</p><ul><li>Több tipizálást igényel, mint az objektum literális módszer.</li><li>Nem működik olyan jól a webböngészőkben.</li><li>Nehezebb olvasni, mint az objektum literális módszert.</li></ul><h2 id="objektumtulajdonsagok-lekerdezese-es-beallitasa" tabindex="-1"><a class="header-anchor" href="#objektumtulajdonsagok-lekerdezese-es-beallitasa" aria-hidden="true">#</a> Objektumtulajdonságok lekérdezése és beállítása</h2><p>Miután létrehozotál egy objektumot és meghatároztad a tulajdonságait, szeretnéd, ha ezeket a tulajdonságokat lekérdezhetné és megváltoztathatná. Az objektum tulajdonságaihoz kétféleképpen férhetünk hozzá: pontjelöléssel vagy szögletes zárójeles jelöléssel.</p><h3 id="pont-jeloles" tabindex="-1"><a class="header-anchor" href="#pont-jeloles" aria-hidden="true">#</a> Pont jelölés</h3><p>A pontjelölésben az objektum neve után egy pont (vagy pont), majd a lekérdezni vagy beállítani kívánt tulajdonság neve következik.</p><p>A <code>person</code> objektumban egy új, <code>firstName</code> nevű tulajdonság létrehozásához vagy egy meglévő <code>firstName</code> tulajdonság értékének módosításához a következő utasítást kell használni:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&quot;Glenn&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ha a <code>firstName</code> tulajdonság még nem létezik, ez az utasítás létrehozza azt.</p><p>Ha már létezik, akkor frissíti azt egy új értékkel.</p><p>Egy tulajdonság értékének pontjelöléssel történő lekérdezéséhez pontosan ugyanazt a szintaxist használjuk, de az objektum és a tulajdonság nevét (az úgynevezett property accessor) az utasításban más helyre helyezzük. Ha például a <code>person.firstName</code> és <code>person.lastName</code> értékeit szeretnéd összekapcsolni, és egy új, <code>fullName</code> nevű változóhoz rendelni, akkor a következőképpen járna el:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fullname <span class="token operator">=</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vagy, hogy kiírja a <code>person.firstName</code> értékét a html dokumentumba, mint például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A pontjelölés általában gyorsabban megírható és könnyebben olvasható módja az objektumtulajdonságok értékeinek beállításának és lekérdezésének.</p><h3 id="szogletes-zarojeles-jeloles" tabindex="-1"><a class="header-anchor" href="#szogletes-zarojeles-jeloles" aria-hidden="true">#</a> Szögletes zárójeles jelölés</h3><p>A szögletes zárójeles jelölés - jól sejted - szögletes zárójeleket használ az objektum neve után a tulajdonságértékek lekérdezéséhez és beállításához. A tulajdonság értékének szögletes zárójeles jelöléssel történő beállításához tedd a tulajdonság nevét idézőjelbe, szögletes zárójelek közé, így:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>person<span class="token punctuation">[</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Iggy&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A szögletes zárójeles jelölésnek van néhány olyan képessége, ami a pontjelölésnek nincs. A legfontosabb, hogy a szögletes zárójeles jelölésen belül használhatsz változókat olyan esetekben, amikor a program írása közben nem tudod a lekérdezni kívánt tulajdonság nevét.<br> A következő példa pontosan ugyanazt teszi, mint az előző példa, de a szögletes zárójelben lévő változóval, nem pedig szó szerinti karakterlánccal. Ezzel a technikával egyetlen olyan utasítást készíthetsz, amely többféle körülmények között is működhet, például egy ciklusban vagy függvényben:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> personProperty <span class="token operator">=</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">;</span>
person<span class="token punctuation">[</span>personProperty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Iggy&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A lenti kód egy egyszerű programot mutat, amely létrehoz egy szék nevű objektumot, majd végigmegy az objektum minden egyes tulajdonságán, és megkéri a felhasználót, hogy adja meg az egyes tulajdonságok értékeit. Miután a felhasználó minden egyes tulajdonsághoz megadta az értéket, meghívja a <code>writeChairReceipt</code> függvényt, amely kiírja az egyes tulajdonságokat a felhasználó által megadott értékkel együtt.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>The WatzThis? Chair Configurator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">var</span> myChair <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;cushionMaterial&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;numberOfLegs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;legHeight&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">configureChair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> userValue<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> myChair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>myChair<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    userValue <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a value for &quot;</span> <span class="token operator">+</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    myChair<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> userValue<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">writeChairReceipt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h2&gt; Your chair will have the following configuration: &lt;/h2&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> myChair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>myChair<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>property <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> myChair<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">configureChair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">writeChairReceipt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tulajdonsagok-torlese" tabindex="-1"><a class="header-anchor" href="#tulajdonsagok-torlese" aria-hidden="true">#</a> Tulajdonságok törlése</h3><p>Az objektumok tulajdonságait a törlés operátor segítségével törölheted.<br> A lenti kód mutatja be ennek az operátornak a működését.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">var1</span><span class="token operator">:</span> <span class="token string">&quot;the value&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">var2</span><span class="token operator">:</span> <span class="token string">&quot;another value&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">var3</span><span class="token operator">:</span> <span class="token string">&quot;yet another&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// delete var2 from myObject </span>
<span class="token keyword">delete</span> myObject<span class="token punctuation">.</span>var2<span class="token punctuation">;</span>

<span class="token comment">// try to write the value of var2 </span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// result is an error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="metodusokkal-valo-munka" tabindex="-1"><a class="header-anchor" href="#metodusokkal-valo-munka" aria-hidden="true">#</a> Metódusokkal való munka</h3><p>A metódusok olyan tulajdonságok, amelyek értékeit függvények adják meg. A metódusokat ugyanúgy definiálhatod, mint bármely függvényt. Az egyetlen különbség az, hogy a metódus egy objektum tulajdonságához van rendelve. A kód egy olyan objektum létrehozását mutatja be, amely több tulajdonsággal rendelkezik, amelyek közül az egyik egy metódus.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sandwich <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">meat</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cheese</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bread</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">condiment</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>

    <span class="token function-variable function">makeSandwich</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">meat<span class="token punctuation">,</span> cheese<span class="token punctuation">,</span> bread<span class="token punctuation">,</span> condiment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sandwich<span class="token punctuation">.</span>meat <span class="token operator">=</span> meat<span class="token punctuation">;</span>
        sandwich<span class="token punctuation">.</span>cheese <span class="token operator">=</span> cheese<span class="token punctuation">;</span>
        sandwich<span class="token punctuation">.</span>bread <span class="token operator">=</span> bread<span class="token punctuation">;</span>
        sandwich<span class="token punctuation">.</span>condiment <span class="token operator">=</span> condiment<span class="token punctuation">;</span>
        <span class="token keyword">var</span> mySandwich <span class="token operator">=</span> sandwich<span class="token punctuation">.</span>bread <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>meat <span class="token operator">+</span>
            <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>cheese <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>condiment<span class="token punctuation">;</span>
        <span class="token keyword">return</span> mySandwich<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A szendvics objektum <code>makeSandwich</code> metódusának meghívásához pontjelölést használhatunk, mintha egy tulajdonságot hívnánk meg, de a zárójelekkel és a metódus neve után megadott paraméterekkel, ahogy az alábbiakban láthatod.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Make me a sandwich<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
       <span class="token keyword">var</span> sandwich <span class="token operator">=</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">meat</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">cheese</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">bread</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">condiment</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
         <span class="token function-variable function">makeSandwich</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">meat<span class="token punctuation">,</span> cheese<span class="token punctuation">,</span> bread<span class="token punctuation">,</span> condiment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           sandwich<span class="token punctuation">.</span>meat <span class="token operator">=</span> meat<span class="token punctuation">;</span>
           sandwich<span class="token punctuation">.</span>cheese <span class="token operator">=</span> cheese<span class="token punctuation">;</span>
           sandwich<span class="token punctuation">.</span>bread <span class="token operator">=</span> bread<span class="token punctuation">;</span>
           sandwich<span class="token punctuation">.</span>condiment <span class="token operator">=</span> condiment<span class="token punctuation">;</span>
           <span class="token keyword">var</span> mySandwich <span class="token operator">=</span> sandwich<span class="token punctuation">.</span>bread <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>meat <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>cheese <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> sandwich<span class="token punctuation">.</span>condiment<span class="token punctuation">;</span>
           <span class="token keyword">return</span> mySandwich<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">var</span> sandwichOrder <span class="token operator">=</span> sandwich<span class="token punctuation">.</span><span class="token function">makeSandwich</span><span class="token punctuation">(</span><span class="token string">&quot;ham&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cheddar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wheat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; spicy mustard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sandwichOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this-hasznalata" tabindex="-1"><a class="header-anchor" href="#this-hasznalata" aria-hidden="true">#</a> This használata</h3><p>A <code>this</code> kulcsszó egy rövidített kifejezés a következő objektumra való hivatkozásra<br> metódus objektumára való hivatkozás. Például a lenti kódban a szendvics nevű objektum minden példányát this-re cseréltük. Amikor a makeSandwich függvényt a sandwich objektum metódusaként hívjuk meg, a JavaScript megérti, hogy a this a sandwich objektumra utal.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Make a sandwich<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">var</span> sandwich <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">meat</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">cheese</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">bread</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">condiment</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">makeSandwich</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">meat<span class="token punctuation">,</span> cheese<span class="token punctuation">,</span> bread<span class="token punctuation">,</span> condiment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>meat <span class="token operator">=</span> meat<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>cheese <span class="token operator">=</span> cheese<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>bread <span class="token operator">=</span> bread<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>condiment <span class="token operator">=</span> condiment<span class="token punctuation">;</span>
                <span class="token keyword">var</span> mySandwich <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bread <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>meat <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cheese <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>condiment<span class="token punctuation">;</span>
                <span class="token keyword">return</span> mySandwich<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> sandwichOrder <span class="token operator">=</span> sandwich<span class="token punctuation">.</span><span class="token function">makeSandwich</span><span class="token punctuation">(</span><span class="token string">&quot;ham&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cheddar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wheat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; spicy mustard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sandwichOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>this</code> kulcsszó használata a konkrét objektumnév helyett ebben az esetben is pontosan ugyanazt eredményezi.</p><p>Ez akkor válik nagyon hasznossá, ha olyan függvényünk van, amely több különböző objektumra is vonatkozhat. Ebben az esetben a <code>this</code> kulcsszó a meghívott objektumra fog hivatkozni, ahelyett, hogy egy adott objektumhoz lenne kötve.</p><p>A következő szakaszokban a konstruktorfunkciókkal és az örökléssel ismerkedhetünk meg, mindkettőt a szerény <code>this</code> utasítás teszi lehetővé.</p><h2 id="egy-objektumorientalt-ut-a-gazdagsaghoz-orokles" tabindex="-1"><a class="header-anchor" href="#egy-objektumorientalt-ut-a-gazdagsaghoz-orokles" aria-hidden="true">#</a> Egy objektumorientált út a gazdagsághoz: Öröklés</h2><p>Amikor objektumokat hozol létre, nem korlátozódsz csak bizonyos objektumok létrehozására, mint például a gitárod, az autód, a macskád vagy a szendvicsed. Az objektumok igazi szépsége az, hogy olyan objektumtípusok létrehozására használhatod őket, amelyekből más objektumok hozhatók létre.</p><p>Ha elolvastad az anyag korábbi részeit, minden létrehozott objektumot közvetlenül az Object típusú objektumból konstruált.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Itt egy új <code>Object</code> típusú személy objektum jön létre. Ez az új person objektum tartalmazza az <code>Object</code> típus összes alapértelmezett tulajdonságát és metódusát, de új névvel. Ezután a person objektumhoz hozzáadhatod a saját tulajdonságait és metódusait, hogy az konkrétan leírja, hogy mit ért személy alatt.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hands <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&quot;Homo sapien&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tehát most már beállítottad a person objektum néhány speciális tulajdonságát. Képzeljük el, hogy egy új objektumot szeretnénk létrehozni, amely egy bizonyos személy, például Willie Nelson. Egyszerűen létrehozhatsz egy új objektumot <code>willieNelson</code> néven, és megadhatod neki ugyanazokat a tulajdonságokat, mint a person objektumnak, plusz azokat a tulajdonságokat, amelyek Willie Nelsont egyedivé teszik.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> willieNelson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>hands <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&quot;Homo sapien&quot;</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>occupation <span class="token operator">=</span> <span class="token string">&quot;musician&quot;</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>hometown <span class="token operator">=</span> <span class="token string">&quot;Austin&quot;</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>hair <span class="token operator">=</span> <span class="token string">&quot;Long&quot;</span><span class="token punctuation">;</span>
willieNelson<span class="token punctuation">.</span>genre <span class="token operator">=</span> <span class="token string">&quot;country&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>willieNelson</code> objektum meghatározásának ez a módja azonban pazarló. Rengeteg munkát igényel, és itt semmi sem utal arra, hogy Willie Nelson egy személy lenne. Ő csak történetesen ugyanazokkal a tulajdonságokkal rendelkezik, mint egy személynek.</p><p>A megoldás az, hogy létrehozunk egy új objektumtípust <code>Person</code> néven, majd a willieNelson objektumot Person típusúvá tesszük.</p><p>Vegyük észre, hogy amikor egy objektumtípusról beszélünk, mindig nagybetűvel írjuk az objektumtípus nevét. Ez nem követelmény, de ez egy szinte általános konvenció. Például azt mondjuk, hogy</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vagy</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> willieNelson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="objektumok-konstrualasa-a-konstruktor-fuggvenyek" tabindex="-1"><a class="header-anchor" href="#objektumok-konstrualasa-a-konstruktor-fuggvenyek" aria-hidden="true">#</a> Objektumok konstruálása a konstruktor függvények</h3><p>Egy új típusú objektum létrehozásához definiáljunk egy új konstruktorfunkciót. A konstruktorfüggvények ugyanúgy jönnek létre, mint bármelyik függvény a JavaScriptben, de a this kulcsszó segítségével tulajdonságokat rendelnek egy új objektumhoz. Az új objektum ezután örökli az objektumtípus tulajdonságait.</p><p>Íme egy konstruktorfunkció a Person objektumtípusunkhoz:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hands <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&quot;Homo sapien&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy új <code>Person</code> típusú objektum létrehozásához most csak annyit kell tenned, hogy a függvényt egy új változóhoz rendeled. Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> willieNelson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>willieNelson</code> objektum a <code>Person</code> objektumtípus tulajdonságait örökli. Annak ellenére, hogy a <code>willieNelson</code> objektumhoz nem hoztunk létre külön tulajdonságokat, a <code>Person</code> objektum tartalmazza a <code>Person</code> összes tulajdonságát.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Inheritance demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hands <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&quot;Homo sapien&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">var</span> willieNelson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Willie Nelson has &quot;</span> <span class="token operator">+</span> willieNelson<span class="token punctuation">.</span>feet <span class="token operator">+</span> <span class="token string">&quot;feet!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objektumtipus-modositasa" tabindex="-1"><a class="header-anchor" href="#objektumtipus-modositasa" aria-hidden="true">#</a> Objektumtípus módosítása</h3><p>Tegyük fel, hogy van a Person objektumtípusunk, amely több objektum prototípusaként szolgál. Egy bizonyos ponton rájössz, hogy a Person, valamint a tőle örökölt összes objektumnak rendelkeznie kellene még néhány tulajdonsággal.</p><p>A prototípus objektum módosításához használd a prototípus tulajdonságot, amelyet minden objektum az Object-től örököl.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hands <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&quot;Homo sapien&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> willieNelson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> johnnyCash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> patsyCline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Person needs more properties! </span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>knees <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toes <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>elbows <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// Check the values of existing objects for the new properties</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>patsyCline<span class="token punctuation">.</span>toes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outputs 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objektumok-letrehozasa-az-object-create-segitsegevel" tabindex="-1"><a class="header-anchor" href="#objektumok-letrehozasa-az-object-create-segitsegevel" aria-hidden="true">#</a> Objektumok létrehozása az Object.create segítségével</h3><p>Egy másik módja annak, hogy objektumokat hozzunk létre más objektumokból, az Object.create metódus használata. Ennek a módszernek az az előnye, hogy nem kell konstruktorfüggvényt írni. Egyszerűen csak egy megadott objektum tulajdonságait másold be egy új objektumba. Amikor egy objektum egy másik objektumtól örököl, az objektumot, amelytől örököl, prototípusnak nevezzük.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a generic Person </span>
<span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eyes</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">arms</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">feet</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token comment">// create the willieNelson object, based on Person </span>

<span class="token keyword">var</span> willieNelson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// test an inherited property</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>willieNelson<span class="token punctuation">.</span>feet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outputs 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99),o=[p];function l(c,i){return s(),a("div",null,o)}const k=n(e,[["render",l],["__file","lesson8.html.vue"]]);export{k as default};
