import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-6f275e76.js";const e={},p=t(`<h1 id="_6-tananyag" tabindex="-1"><a class="header-anchor" href="#_6-tananyag" aria-hidden="true">#</a> 6. tananyag</h1><h2 id="ciklusokkal-es-elagazasokkal-valo-munka" tabindex="-1"><a class="header-anchor" href="#ciklusokkal-es-elagazasokkal-valo-munka" aria-hidden="true">#</a> Ciklusokkal és elágazásokkal való munka</h2><p>Ebben a fejezetben</p><ul><li>Az if/else elágazás megismerése</li><li>A ciklusok különböző típusainak megértése</li><li>A ciklusok használata utasítások ismétlésére</li><li>Egy tömb értékeinek átfutása a ciklusokkal</li></ul><p>Korábban általában lineáris JavaScript-kódról beszéltünk és mutattunk be. Gyakran előfordul azonban, hogy egy programban eljön az az idő (valójában sokszor), amikor választani kell, vagy amikor meg kell változtatni a program egyenes vonalú logikáját, hogy az állapotokat többször megismételjük különböző értékekkel. Ebben a fejezetben a ciklus- és elágazó utasításokat tárgyaljuk.</p><h3 id="elagazas" tabindex="-1"><a class="header-anchor" href="#elagazas" aria-hidden="true">#</a> Elágazás</h3><p>A ciklusokkal és elágozásokkal utasításokat vezérlő utasításoknak nevezzük, mert ezek szabályozzák a JavaScript programok futtatásának sorrendjét. Az elágazási utasításokkal a JavaScript-kód végrehajtásához különböző útvonalakat hozhat létre a feltételes logikától függően. A ciklusok a legegyszerűbb módja annak, hogy a JavaScript utasításokat egy programban csoportosítsuk.</p><p>Egy JavaScript program logikája gyakran eljut egy olyan pontra, ahol olyan döntést kell hozni, amely mindent megváltoztat. A 6-1. ábra JavaScript segítségével mutat be egy olyan valós döntést, amelyet elágazás segítségével oldhatunk meg.</p><h3 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> <code>if</code> . . . <code>else</code></h3><p>Az if és <code>else</code> utasítások együtt dolgoznak egy logikai kifejezés kiértékelésében és az eredmény alapján különböző utasítások futtatásában. Az if utasítások önmagukban is használhatók, és gyakran használják is őket. Az <code>else</code> utasításokat mindig az if utasítással együtt kell használni.</p><p>Az if utasítás alapvető szintaxisa a következő:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A feltétel itt bármely olyan kifejezés, amely Boolean (igaz vagy hamis) értéket ad. Ha a kifejezés eredménye igaz, akkor a zárójelek közötti utasítások végrehajtásra kerülnek. Ha az eredmény hamis, akkor egyszerűen átugrik.</p><p>Az <code>else</code> utasítás akkor jön be, ha valamit akkor akarunk csinálni, ha a feltétel értéke hamis. Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;You are under the legal drinking age in the U.S.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;What&#39;ll it be?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sok más programozási nyelv rendelkezik egy <code>elseif</code> nevű kombinációs kulcsszóval, amelyet többször is használhatunk egy <code>if ... else</code> utasításban, amíg igaz értéket nem kapunk. <strong>A JavaScript nem rendelkezik <code>elseif</code> kulcsszóval.</strong></p><p>Az <code>elseif</code> kulcsszóval megegyező funkcionalitást érhetünk el azonban, ha az <code>if</code> és az <code>else</code> kulcsszavakat együtt használjuk, a kettő között szóközzel. Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Good Morning!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Good Afternoon!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Good Evening!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Good Night!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Figyeld meg a sortörések és szóközök használatát az előző példákban. Sokan különböző stílusban írják az <code>if</code> ... <code>else</code> utasításokat. Előfordulhat, hogy kevesebb sortöréssel vagy a kulcsszavak és zárójelek közötti szóköz nélkül írják őket. Ezek is működnek. Azonban amikor csak lehetséges, a könnyebb olvashatóságot előnyben kell részesíteni a rövidséggel szemben.</p><h3 id="az-if-else-rovidites-megertese" tabindex="-1"><a class="header-anchor" href="#az-if-else-rovidites-megertese" aria-hidden="true">#</a> Az <code>if</code> . . . <code>else</code> rövidítés megértése</h3><p>Az <code>if</code> ... <code>else</code> utasítások használatához ismerned kell néhány rövidítést. Az első az <code>if</code> ... <code>else</code> helyett egy <code>terner</code> operátor használata. Ez némileg nehezebben olvasható, mint a hagyományos <code>if</code> ... <code>else</code>:</p><p>A ternerális karakterek a következő:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> whatToSay <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string">&quot;Jó reggelt&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ebben az esetben a <code>whatToSay</code> értéke <strong>&quot;Jó reggelt&quot;</strong>-ra lesz állítva, ha az idő kevesebb, mint <strong>12</strong>, és <strong>&quot;Hello&quot;</strong>-ra lesz állítva, ha az idő nem kevesebb, mint <strong>12</strong>.</p><p>Egy másik rövidített módszer az <code>if</code> ... <code>else</code> utasítások írására a logikai ÉS (<code>&amp;&amp;</code>) operátor. Ne feledjük, hogy a logikai ÉS csak akkor értékeli ki a második operandus értékét, ha az első igaznak adódik. A programozók ezt rövidzárlatnak nevezik, mert a logikai <strong>ÉS</strong> műveletben nem szükséges a második operandus kiértékelése, ha az első operandus hamis értéket eredményez.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>time <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Jó reggelt!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Az előző példában az <code>&amp;&amp;</code> utasítás először azt vizsgálja, hogy az idő kisebb-e <strong>12</strong>-nél. Ha igen, akkor a <strong>&quot;Jó reggelt&quot;</strong> karakterláncot írja be a HTML dokumentumba. Ha nem, akkor az <code>&amp;&amp;</code> operátor rövidre záró mellékhatása miatt nem történik semmi.</p><p>Ezt a módszert nem gyakran használják, elsősorban azért, mert nehezen érthető és zavaros. Azonban időnként találkozhatsz ilyesmivel, és meg kell értened, hogyan működik.</p><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> Switch</h3><p>A <code>switch</code> utasítás egy kifejezés lehetséges értékei alapján választ több végrehajtandó utasítás közül. A <code>switch</code> utasításban minden ilyen értéket <code>case</code>-nek nevezünk. Magyarul azt mondhatjuk például:</p><p>&quot;Abban az esetben, ha hat vendéget várunk, rendeljünk három pizzát. Abban az esetben, ha 12 vendéget várunk, rendeljen hat pizzát. Abban az esetben, ha több mint 20 vendéget várunk, akadjon ki.&quot;.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>
		<span class="token comment">// Statements</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>
		<span class="token comment">// Statements</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token literal-property property">value3</span><span class="token operator">:</span>
		<span class="token comment">// Statements</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		<span class="token comment">// Statements</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Figyeljük meg a <code>break</code> utasítást. A <code>break</code> utasítás azt mondja a <code>switch</code>-nek, hogy állítsa le és lépjen ki a <code>switch</code>-ből. A megszakítás nélkül a <code>switch</code> utasítás folytatná és futtatná a következő feltételben szereplő utasításokat, függetlenül attól, hogy a kifejezés megfelel-e az adott eset feltételeinek.</p><p>A <code>break</code> utasítás elfelejtése a <code>switchen</code> belül nagy problémákat okozhat, ezért mindig használd. Mivel a <code>switch</code> utasítás bármely <code>case</code> kifejezés belüli bármely utasítást lefuttat egy igazra értékelő kifjezés után, kiszámíthatatlan eredmények adódhatnak, ha elfelejtjük a <code>break</code> utasítást. A <code>break</code> utasítás kihagyása által okozott problémákat nem könnyű azonosítani, mert általában nem okoznak hibát, de gyakran hibás eredményeket produkálnak.</p><p>Ha a <code>case</code> kifejezések egyikében sem találunk egyezést, a <code>switch</code> utasítás keres egy default kifejezést, és végrehajtja az abban szereplő utasítást.</p><p>A kivétel a szabály alól, miszerint a <code>case</code> kifejezés között mindig <code>break</code> utasítást kell használni. Amíg a <code>default</code> az utolsó utasítás a <code>switchben</code> (aminek így kell lennie), addig nyugodtan elhagyhatjuk a break-et utána, mert a program úgyis ki fog lépni a <code>switchből</code> az utolsó utasítás után.</p><h3 id="for-for-in-while-do-while" tabindex="-1"><a class="header-anchor" href="#for-for-in-while-do-while" aria-hidden="true">#</a> for, for ... in, while, do ... while</h3><p>A ciklusok ugyanazt az utasítást többször is végrehajtják. A JavaScriptben többféle ciklus létezik:</p><ul><li>for</li><li>for...in</li><li>do...while</li><li>while</li></ul><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h3><p>A <code>for</code> utasítás három kifejezést használva hoz létre egy ciklust:</p><ul><li><strong>Inicializálás</strong>: Egy változó, jellemzően egy számláló kezdeti értéke.</li><li><strong>Feltétel</strong>: Egy Boolean kifejezés, amelyet a ciklus minden egyes iterációjánál ki kell értékelni.</li><li><strong>Végső kifejezés</strong>: A ciklus minden egyes iterációja után kiértékelendő kifejezés.</li></ul><p>Bár nem kötelező mindhárom kifejezést használni egy <code>for</code> ciklusban, szinte mindig mindhárom szerepel. A for-ciklust általában arra használják, hogy a kódot előre meghatározott számú alkalommal futtassák le.</p><p>A következő egy példa egy egyszerű for ciklusra:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lebontva így működik az előző <code>for ciklus</code>:</p><ol><li>Létrehoz egy új változót, ebben az esetben <strong>x</strong>-et, 1 értékkel indítunk.</li><li>Egy tesztet hajtunk végre annak megállapítására, hogy <strong>x</strong> kisebb-e <em>10-nél</em>. Ha igen, akkor a cikluson belüli utasítások végrehajtásra kerülnek (ebben az esetben egy <code>console.log(x)</code> utasítás).</li><li>Ha nem, akkor <strong>x</strong> értékét a <strong>inkrementáló operátor</strong> (<strong>++</strong>) segítségével növeljük.</li><li>A tesztet újra elvégezzük, hogy megállapítsuk, hogy <strong>x</strong> kisebb-e <em>10-nél</em>. Ha igen, akkor a cikluson belüli utasítások végrehajtásra kerülnek.</li><li>A teszt ismétlődik, amíg a feltételkifejezés már nem értékelődik igazra.</li></ol><h3 id="tombon-valo-atjaras" tabindex="-1"><a class="header-anchor" href="#tombon-valo-atjaras" aria-hidden="true">#</a> Tömbön való átjárás</h3><p>A <code>for</code> ciklusok segítségével ki listázhatod egy tömb tartalmát, a számláló értékét a tömb hossz tulajdonságának értékével összevetve. Ne feledd, hogy a <strong>JavaScript</strong> tömbök nullás indexűek, és hogy bármely <code>array.length</code> értéke eggyel több lesz, mint a tömb legmagasabb indexszámú eleme.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Different Area Codes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> areaCodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;770&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;404&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;718&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;202&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;901&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;305&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;312&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;313&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;215&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;803&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> areaCodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Different Area Code:&quot;</span> <span class="token operator">+</span> areaCodes<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Kimenet:</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Different Area Code:770
Different Area Code:404
Different Area Code:718
Different Area Code:202
Different Area Code:901
Different Area Code:305
Different Area Code:312
Different Area Code:313
Different Area Code:215
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for ... in</h3><p>A <code>for ... in</code> utasítások egy objektum tulajdonságainak körbejárását végzik. A <code>for ... in</code> utasítással egy tömb értékein is végighaladhatunk.</p><p>A <code>for ... in</code> ciklusnak van egy érdekes sajátossága. Nem érdekli a tulajdonságok vagy elemek sorrendje, amelyeken a ciklus végigmegy. Azért a <code>for ... in</code> ciklus használata lassabb, sokkal jobban járunk, ha a tömb elemein való végighaladáshoz egy hagyományos for-ciklust használunk.</p><p>Az objektumok olyan adattárolók, amelyeknek tulajdonságaik <em>(mik ők)</em> és metódusaik <em>(mit csinálnak)</em> vannak. A webböngészők rendelkeznek egy sor beépített objektummal, amelyeket a programozók a böngésző működésének vezérlésére használhatnak. Ezek közül a legalapvetőbb a <code>Document</code> objektum. A <code>Document</code> objektum <code>write</code> metódusa például azt mondja a böngészőnek, hogy egy megadott értéket illesszen be a HTML-dokumentumba.</p><p>A <code>Document</code> objektumnak vannak olyan tulajdonságai is, amelyekkel nyomon követheti és információt adhat a programozóknak az aktuális dokumentumról. A <code>Document.images</code> gyűjtemény például tartalmazza az aktuális HTML-dokumentum összes <code>img</code>-címkéjét.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>document properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">.columns</span> <span class="token punctuation">{</span>
        <span class="token property">-webkit-column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span> // Chrome<span class="token punctuation">,</span> Safari<span class="token punctuation">,</span> Opera 
        <span class="token property">-moz-column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span> // Firefox
        <span class="token property">column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>columns<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>for ... in</code> ciklus segítségével az objektum tulajdonságaiban szereplő értékeket is kiadhatja, nem csak a tulajdonság nevét.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>document properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">.columns</span> <span class="token punctuation">{</span>
        <span class="token property">-webkit-column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span> // Chrome<span class="token punctuation">,</span> Safari<span class="token punctuation">,</span> Opera 
        <span class="token property">-moz-column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span> // Firefox
        <span class="token property">column-count</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>columns<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          document<span class="token punctuation">.</span><span class="token function">write</span> <span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> document<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-ciklusok" tabindex="-1"><a class="header-anchor" href="#while-ciklusok" aria-hidden="true">#</a> while ciklusok</h3><p>A while utasítás egy olyan ciklust hoz létre, amely addig fut, amíg egy feltétel igaznak bizonyul.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Guess the Word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> guessedWord <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;What word am I thinking of ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>guessedWord <span class="token operator">!=</span> <span class="token string">&quot;sandwich&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// as long as the guessed word is not sandwich </span>
            <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;No. That&#39;s not it. Try again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Congratulations! That&#39;s exactly right!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// do this after exiting the loop</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while" aria-hidden="true">#</a> do . . . while</h3><p>A <code>do...while</code> ciklus nagyjából ugyanúgy működik, mint a <code>while</code> ciklus, azzal a különbséggel, hogy az utasításokat a kifejezés elé helyezi a teszteléshez. Ennek az a hatása, hogy a <code>do...while</code> cikluson belüli utasítások mindig legalább egyszer végrehajtódnak.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Let&#39;s Count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">do</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">I</span> <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break-es-a-continue" tabindex="-1"><a class="header-anchor" href="#break-es-a-continue" aria-hidden="true">#</a> break és a continue</h3><p>A <code>break és a continue</code> segítségével megszakíthatod egy ciklus végrehajtását. A <code>break</code> utasítást korábban ebben a fejezetben a <code>switch</code> utasítással összefüggésben mutattuk be, ahol arra szolgál, hogy egy sikeres találat után megszakítsuk a <code>switch</code>-et.<br> Egy ciklusban a <code>break</code> nagyjából ugyanezt teszi. A program azonnali kilépését eredményezi a ciklusból, függetlenül attól, hogy a ciklus befejezésének feltételei teljesülnek-e.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Guess the Word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> guessedWord <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;What word am I thinking of ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>guessedWord <span class="token operator">!=</span> <span class="token string">&quot;sandwich&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>guessedWord <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token comment">// exit the loop right away if user doesn&#39;t enter a value</span>
            <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;No. That&#39;s not it. Try again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Congratulations! That&#39;s exactly right!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>continue</code> utasítás hatására a ciklus aktuális ismétlése leáll, és azt mondja a programnak, hogy a ciklus következő ismétlésével kezdje újra, kihagyva a <code>continue</code> utasítás után következő utasításokat.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Count and show me even numbers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">continue</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; is an even number. &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ilyen módon használva a <code>continue</code> helyettesítheti az <code>else</code> utasítás funkcióját.</p><p><strong>Kimenet:</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>0 is an even number.
2 is an even number.
4 is an even number.
6 is an even number.
8 is an even number.
10 is an even number.
12 is an even number.
14 is an even number.
16 is an even number.
18 is an even number.
20 is an even number.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>break</code> és a <code>continue</code> utasítások hasznosak lehetnek, de veszélyesek is. Kis méretük és nagy erejük miatt a kód átolvasásakor könnyen átsiklunk felettük. Emiatt néhány programozó rossz gyakorlatnak tartja a cikluson belüli használatukat.</p>`,75),o=[p];function l(c,i){return s(),a("div",null,o)}const r=n(e,[["render",l],["__file","lesson6.html.vue"]]);export{r as default};
