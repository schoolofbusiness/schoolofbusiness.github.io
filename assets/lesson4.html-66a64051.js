import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,a as t}from"./app-56f1ebe4.js";const e={},l=t(`<h1 id="_4-tananyag" tabindex="-1"><a class="header-anchor" href="#_4-tananyag" aria-hidden="true">#</a> 4. tananyag</h1><h2 id="tombok-megismerese" tabindex="-1"><a class="header-anchor" href="#tombok-megismerese" aria-hidden="true">#</a> Tömbök megismerése</h2><p>Ebben a fejezetben</p><ul><li>Tömbök azonosítása és meghatározása</li><li>Tömbök létrehozása</li><li>A többdimenziós tömbök</li><li>Munka a tömb elemein belül</li><li>Tömbfüggvények és tulajdonságok használata</li></ul><p>A tömbök minden programozási nyelv alapvető részét képezik. Ebben a fejezetben megtudhatod, hogy mik azok, hogyan használhatod őket, és mi különbözteti meg a JavaScript tömbjeit a más programozási nyelvek tömbjeitől. A tömbökkel listákat hozhatsz létre, listákat rendezhet, és elemeket adhatsz hozzá és távolíthatsz el listákból.</p><h3 id="lista-keszitese" tabindex="-1"><a class="header-anchor" href="#lista-keszitese" aria-hidden="true">#</a> Lista készítése</h3><p>Az anyag korábbi részeiben olyan változókkal dolgozunk, amelyek önálló adatdarabok, például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;Chris&quot;</span>
<span class="token keyword">var</span> firstNumber <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span>
<span class="token keyword">var</span> howManyTacos <span class="token operator">=</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A programozásban <em>(és az életben is)</em> gyakran előfordul, hogy összefüggő adatokat szeretnénk egyetlen név alatt tárolni. Vegyük például a következő típusú listákat:</p><ul><li>A kedvenc előadóink listája</li><li>Egy program, amely kiválaszt és megjelenít egy másik idézetet egy listából, idézetek listájából - minden egyes futtatáskor</li><li>Ünnepi üdvözlőlapok levelezési listája</li><li>Az év legjobb zenei albumainak listája</li><li>Családtagjaid és barátaid születésnapjainak listája</li><li>Vásárlási lista</li><li>Egy tennivaló lista</li><li>Újévi fogadalmak listája</li></ul><p>Egyértékű változók használatával több változót kellene létrehoznod és nyomon követned ahhoz, hogy ezeket a feladatokat elvégezze. Íme egy példa egy egyértékű változókkal létrehozott listára:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> artist1 <span class="token operator">=</span> <span class="token string">&quot;Alphonse Mucha&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist2 <span class="token operator">=</span> <span class="token string">&quot;Chiara Bautista&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist3 <span class="token operator">=</span> <span class="token string">&quot;Claude Monet&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist4 <span class="token operator">=</span> <span class="token string">&quot;Sandro Botticelli&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist5 <span class="token operator">=</span> <span class="token string">&quot;Andy Warhol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist6 <span class="token operator">=</span> <span class="token string">&quot;Wassily Kadinski&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist7 <span class="token operator">=</span> <span class="token string">&quot;Vincent Van Gough&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist8 <span class="token operator">=</span> <span class="token string">&quot;Paul Klee&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist9 <span class="token operator">=</span> <span class="token string">&quot;William Blake&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist10 <span class="token operator">=</span> <span class="token string">&quot;Egon Schiele&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist11 <span class="token operator">=</span> <span class="token string">&quot;Salvador Dali&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist12 <span class="token operator">=</span> <span class="token string">&quot;Paul Cezanne&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist13 <span class="token operator">=</span> <span class="token string">&quot;Diego Rivera&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> artist14 <span class="token operator">=</span> <span class="token string">&quot;Pablo Picasso&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a megközelítés rövid távon működhet, de gyorsan nehézségekbe ütközik. Mi lenne például, ha a listát ábécé-sorrendbe akarná rendezni, és a művészeket az ábécé-sorrendben elfoglalt helyük alapján a megfelelő változónevekbe helyezné át? Ehhez először <strong>Muchát</strong> kellene áthelyeznie az <code>artist1</code> változóból (esetleg egy ideiglenes tárolóváltozóba), majd <strong>Bautistát</strong> az <code>artist1</code> változóba. Az <code>artist2</code> hely ezután szabaddá válna <strong>Blake</strong> számára, de ne feledje, hogy hogy <strong>Mucha</strong> még mindig abban az ideiglenes résben van! <strong>Blake</strong> eltávolítása az <code>artist9</code>-ből felszabadítja azt a helyet, ahonnan valaki mást áthelyezhetsz az ideiglenes változóba, és így tovább. A lista ilyen módon történő létrehozása gyorsan bonyolulttá és zavarossá válik.</p><p>Szerencsére a JavaScript (<em>és minden más általunk ismert programozási nyelv</em>) támogatja a több értéket tartalmazó változók, úgynevezett tömbök létrehozását.</p><p>A tömbökkel összefüggő adatok csoportjait tárolhatjuk egyetlen változóban. A tömbökkel olyan listákat hozhatsz létre, amelyekben tetszőlegesen vegyesen találhatók karakterláncértékek, <em>számok</em>, <em>boolok</em>, <em>objektumok</em>, <em>függvények</em>, bármilyen más típusú adat, sőt, még más <strong>tömbök</strong> is!</p><h3 id="array-alapjai" tabindex="-1"><a class="header-anchor" href="#array-alapjai" aria-hidden="true">#</a> Array alapjai</h3><p>Egy tömb tömbelemekből áll. A tömbelemek a tömb nevéből, majd egy szögletes zárójelben lévő indexszámból állnak. A tömbön belüli egyedi értéket tömbelemnek nevezzük. A tömbök számokat (az úgynevezett <strong>indexszámokat</strong>) használnak az elemek eléréséhez. A következő példa azt szemlélteti, hogy a tömbök hogyan használják az <strong>indexszámokat</strong> az elemek eléréséhez:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;yellow balloon&quot;</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;red balloon&quot;</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;blue balloon&quot;</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;pink balloon&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ebben a példában a <code>0</code> indexszámú elem értéke &quot;<strong>yellow balloon</strong>&quot;. A <code>3</code> indexszámú elem értéke &quot;<strong>pink balloon</strong>&quot;. Mint bármely változónak, a tömbnek is bármilyen nevet adhatsz, amely megfelel a JavaScript-változók elnevezésére vonatkozó szabályoknak. Az <strong>indexszámok</strong> tömbökben történő hozzárendelésével a JavaScript lehetőséget ad arra, hogy egyetlen változónév szinte korlátlan számú értéket tartalmazzon.</p><div class="hint-container tip"><p class="hint-container-title">Tudnivaló</p><p>Csak hogy ne essünk túlzásokba, a tömbök elemszámának valóban van egy határa, bár nagyon valószínűtlen, hogy valaha is elérjük azt. A határérték <strong>4 294 967 295</strong> elem.</p></div><p>Az elnevezési követelményeken kívül a tömböknek van még néhány olyan szabálya és különleges tulajdonsága, amelyeket ismernie kell:</p><ul><li>A tömbök nulla indexűek.</li><li>A tömbök bármilyen típusú adatot tárolhatnak.</li></ul><h3 id="a-tombok-nullaval-indexeltek" tabindex="-1"><a class="header-anchor" href="#a-tombok-nullaval-indexeltek" aria-hidden="true">#</a> A tömbök nullával indexeltek</h3><p>A JavaScriptnek nincsenek ujjai vagy lábujjai. Ezért nem kell betartania a mi őrült emberi szabályainkat, miszerint a számolás <strong>1</strong>-gyel kezdődik. A JavaScript tömbök első eleme mindig <strong>0</strong> indexszámú.</p><p>Ez azt jelenti, hogy a <code>myArray[3]</code> valójában a tömb negyedik eleme.</p><p>A nullás számozás zavaró tényező a programozásban járatlanok számára, de ha egyszer megszokod, akkor teljesen természetes lesz.</p><h3 id="a-tombok-barmilyen-tipusu-adatot-tarolhatnak" tabindex="-1"><a class="header-anchor" href="#a-tombok-barmilyen-tipusu-adatot-tarolhatnak" aria-hidden="true">#</a> A tömbök bármilyen típusú adatot tárolhatnak</h3><p>Egy tömb minden eleme tárolhat bármelyik adattípust, valamint más tömböket is. A tömbelemek függvényeket és JavaScript-objektumokat is tartalmazhatnak.<br> Bár egy tömbben bármilyen típusú adat tárolható, a lent bemutatott módon különböző típusú adatokat tartalmazó elemeket is tárolhatunk együtt, egy tömbben.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">;</span>
item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span>
item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tombok-letrehozasa" tabindex="-1"><a class="header-anchor" href="#tombok-letrehozasa" aria-hidden="true">#</a> Tömbök létrehozása</h3><p>A JavaScript két különböző módon biztosít új tömbök létrehozását:</p><ul><li><code>new</code> kulcsszó</li><li>Tömb szó szerinti jelölés</li></ul><h3 id="a-new-kulcsszo-hasznalata" tabindex="-1"><a class="header-anchor" href="#a-new-kulcsszo-hasznalata" aria-hidden="true">#</a> A <code>new</code> kulcsszó használata</h3><p>A <code>new</code> kulcsszó metódus a <code>new Array()</code> segítségével hoz létre egy tömböt és ad hozzá értékeket.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> catNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&quot;Larry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fuzzball&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mr. Furly&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ezt a módszert programozói pályafutásod során is láthatod használni, és ez egy tökéletesen elfogadható módja egy tömb létrehozásának.</p><div class="hint-container warning"><p class="hint-container-title">Figyelmeztetés</p><p>Sok JavaScript-szakértő azonban nem ajánlja ezt a módszert. A legnagyobb probléma a <code>new</code> kulcsszó használatával az, hogy mi történik, ha elfelejtjük beilleszteni. Ha elfelejtjük használni a <code>new</code> kulcsszót, az drámaian megváltoztathatja a programunk működését.</p></div><h3 id="array-literalis" tabindex="-1"><a class="header-anchor" href="#array-literalis" aria-hidden="true">#</a> Array literális</h3><p>A tömbök létrehozásának sokkal egyszerűbb és biztonságosabb módja az úgynevezett tömb literal jelölési módszer használata. Ez így néz ki:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dogNames <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Shaggy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tennesee&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dr. Spock&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ennyi az egész. A szögletes zárójelek és a speciális kulcsszavak hiánya azt jelenti, hogy kisebb a valószínűsége annak, hogy véletlenül kihagy valamit. A tömbi szó szerinti módszer kevesebb karaktert használ, mint az új kulcsszavas módszer - és amikor a JavaScriptet a lehető legjobban próbáljuk rendben tartani, minden kis apróság segít!</p><h3 id="tablak-feltoltese" tabindex="-1"><a class="header-anchor" href="#tablak-feltoltese" aria-hidden="true">#</a> Táblák feltöltése</h3><p>Egy tömbhöz hozzáadhatsz értékeket, amikor először létrehozod, vagy egyszerűen létrehozhatsz egy tömböt, majd később hozzáadhatsz elemeket. Az elemek hozzáadása egy tömbhöz pontosan ugyanúgy működik, mint egy változó létrehozása vagy módosítása, azzal a különbséggel, hogy megadja a létrehozni vagy módosítani kívánt elem indexszámát. A lenti példában egy üres tömb létrehozására, majd elemek hozzáadására mutat példát.</p><p><strong>Egy üres tömb feltöltése</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> peopleList <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
peopleList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Chris Minnick&quot;</span><span class="token punctuation">;</span>
peopleList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Eva Holland&quot;</span><span class="token punctuation">;</span>
peopleList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Abraham Lincoln&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nem kell mindig egymás után hozzáadni az elemeket. A JavaScriptben teljesen legális, ha új elemet nem sorrendben hozunk létre. Például az előző, példában szereplő tömbhöz a következőket is hozzáadhatnánk:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>peopleList<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tina Turner&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Egy ilyen sorrenden kívüli tömb létrehozása gyakorlatilag üres elemeket hoz létre a <code>peopleList[2]</code> és <code>peopleList[99]</code> közötti összes indexhez.</p><p>Tehát, ha a <code>peopleList</code> tömb hossz tulajdonságát egy <code>99</code>-es indexű elem hozzáadása után ellenőrizzük, valami érdekes történik:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>peopleList<span class="token punctuation">.</span>length <span class="token comment">// returns 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Annak ellenére, hogy csak négy elemet hoztunk létre, a JavaScript azt fogja mondani, hogy a tömb hossza <strong>100</strong>, mivel a hossz <em>a legmagasabb számozott indexen alapul</em>, <strong>nem</strong> pedig azon, hogy <em>hány elemet hoztunk létre.</em></p><h3 id="tobbdimenzios-tombok-megertese" tabindex="-1"><a class="header-anchor" href="#tobbdimenzios-tombok-megertese" aria-hidden="true">#</a> Többdimenziós tömbök megértése</h3><p>Nemcsak tömböket tárolhatsz tömbökben, hanem tömböket is elhelyezhetsz tömbökben. Ez így tovább és tovább folytatható. Egy tömböt, amely egy tömböt tartalmaz, többdimenziós tömbnek nevezünk. Többdimenziós tömb írásához egyszerűen több szögletes zárójelet adsz a változó nevéhez. Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> listOfLists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A többdimenziós tömböket nehéz lehet megjeleníteni, amikor először kezdünk el velük dolgozni.</p><p>A többdimenziós tömböket hierarchikus listák vagy vázlatok formájában is megjelenítheti. Például:</p><p>Top albumok műfaj szerint</p><ol><li>Country</li></ol><p>1.1 Johnny Cash:Live at Folsom Prison</p><p>1.2 Patsy Cline:Sentimentally Yours</p><p>1.3 Hank Williams:I’m Blue Inside</p><ol start="2"><li>Rock</li></ol><p>2.1 T‐Rex:Slider</p><p>2.2 Nirvana:Nevermind</p><p>2.3 Lou Reed:Transformer</p><ol start="3"><li>Punk</li></ol><p>3.1 Flipper:Generic</p><p>3.2 The Dead Milkmen: Big Lizard in my Backyard</p><p>3.3 Patti Smith:Easter</p><p>Íme egy kód, amely létrehoz egy tömböt a fentiek alapján:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> bestAlbumsByGenre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">;</span>
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Johnny Cash:Live at Folsom Prison&quot;</span>
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Patsy Cline:Sentimentally Yours&quot;</span><span class="token punctuation">;</span>
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hank Williams:I&#39;m Blue Inside&quot;</span><span class="token punctuation">;</span> 

bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Rock&quot;</span><span class="token punctuation">;</span>
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;T-Rex:Slider&quot;</span><span class="token punctuation">;</span> 
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Nirvana:Nevermind&quot;</span><span class="token punctuation">;</span> 
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Lou Reed:Tranformer&quot;</span><span class="token punctuation">;</span> 

bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Punk&quot;</span><span class="token punctuation">;</span>
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Flipper:Generic&quot;</span><span class="token punctuation">;</span> 
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;The Dead Milkmen:Big Lizard in my Backyard&quot;</span><span class="token punctuation">;</span> 
bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Patti Smith:Easter&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tombelemek-elerese" tabindex="-1"><a class="header-anchor" href="#tombelemek-elerese" aria-hidden="true">#</a> Tömbelemek elérése</h3><p>A tömbök elemeit ugyanúgy érheted el, ahogyan beállítottad őket, szögletes zárójelek és az indexszám használatával. Például, ha a myArray nevű tömb harmadik elemét szeretnéd elérni, akkor a következőt kell használnod:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Egy többdimenziós tömb elemeinek eléréséhez csak adjunk hozzá több szögletes zárójelet, hogy elérjük a kívánt elemet:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>bestAlbumsByGenre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// returns &quot;Patsy_ Cline:Sentimentally Yours&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Egy tömb elemeinek beállítását és elérését a következő lépésekkel próbálhatod ki:</p><ol><li><p>Nyisd meg a Chrome böngészőt, és nyisd meg a JavaScript konzolt.<br> A JavaScript-konzolt a Chrome menüjével vagy a Macen a <code>Command + Option + J</code>, illetve Windowson a <code>Ctrl + Shift + J</code> billentyűkombinációval nyithatod meg.</p></li><li><p>A konzolban írd be a következő utasítást, majd a Return vagy az Enter billentyűt, hogy létrehozzon egy <code>lengthsOfString</code> nevű tömböt:</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> lengthsOfString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Írd be a tömb nevét, majd szögletes zárójelben az indexszámot, hogy lekérd az egyes tömbelemek értékét.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>lengthsOfString<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
lengthsOfString<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
lengthsOfString<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Adj meg olyan indexszámot, amely nem létezik a tömbben.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>lengthsOfString<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Írd be a következő parancsot egy új változó létrehozásához, amely a rendelkezésre álló karakterlánc teljes hosszát tárolja:</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> totalLength <span class="token operator">=</span> lengthsOfString<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> lengthsOfString<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> lengthsOfString<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> lengthsOfString<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>Végül a totalLength értékét kapja meg ezzel a paranccsal:</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>totalLength<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tombokon-valo-atfutas" tabindex="-1"><a class="header-anchor" href="#tombokon-valo-atfutas" aria-hidden="true">#</a> Tömbökön való átfutás</h3><p>Ahogy azt el tudod képzelni, a tömbök több értékével való munka a tömb nevének és az indexszámnak a beírásával egy idő után fárasztó lehet az ujjaid számára. Szerencsére vannak egyszerűbb módszerek is arra, hogy egy tömb összes elemével dolgozzunk. A leggyakoribb módszer a ciklusnak nevezett programozási konstrukció használata.</p><p>A JavaScript beépített tömbfüggvényeinek használatával is dolgozhatunk egy tömb több elemével.</p><h3 id="tomb-tulajdonsagai" tabindex="-1"><a class="header-anchor" href="#tomb-tulajdonsagai" aria-hidden="true">#</a> Tömb tulajdonságai</h3><p>A tömb tulajdonságainak elérésével hozzáférhetsz egy tömb bizonyos adataihoz. A JavaScriptben a tömbtulajdonságok elérésének módja a pontjelölés használata. A pontjelölés használatához írd be a tömb nevét, amelyet egy pont követ, majd a tulajdonság, amelyhez hozzá szeretnél férni. A lenti táblázat a JavaScript tömbök összes tulajdonságát felsorolja.</p><table><thead><tr><th style="text-align:center;">Tulajdonság</th><th style="text-align:center;">Visszatérési érték</th></tr></thead><tbody><tr><td style="text-align:center;">prototype</td><td style="text-align:center;">Lehetővé teszi tulajdonságok és metódusok hozzáadását egy Array objektumhoz.</td></tr><tr><td style="text-align:center;">constructor</td><td style="text-align:center;">Hivatkozás arra a függvényre, amely létrehozta az Array objektum prototípusát.</td></tr><tr><td style="text-align:center;">length</td><td style="text-align:center;">Visszaadja vagy beállítja egy tömb elemeinek számát.</td></tr></tbody></table><p>A leggyakrabban használt tömbtulajdonság a hossz. A <code>length</code> tulajdonságot már láthattad működés közben. Célja, hogy megadja a tömbben lévő elemek számát, akár definiált, akár nem definiált.<br> Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> myArray<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// returns 2001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A length tulajdonságot használhatod a tömb lerövidítéséhez is:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// returns 2001 </span>
myArray<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// returns 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-modszerek" tabindex="-1"><a class="header-anchor" href="#array-modszerek" aria-hidden="true">#</a> Array módszerek</h3><p>A JavaScript tömbmetódusok (<em>más néven tömbfüggvények</em>) praktikus módszereket biztosítanak a tömbök manipulálására és kezelésére. A lenti táblázat az összes tömbmetódus listáját mutatja, a műveletek vagy az általuk előállított értékek leírásával együtt.</p><table><thead><tr><th style="text-align:center;">Metódus</th><th style="text-align:center;">Leírás</th></tr></thead><tbody><tr><td style="text-align:center;">concat()</td><td style="text-align:center;">Egyesíti a tömböket és visszaad egy tömböt az egyesített tömbökkel.</td></tr><tr><td style="text-align:center;">constructor</td><td style="text-align:center;">Visszaadja az Array objektum prototípusát létrehozó függvényt.</td></tr><tr><td style="text-align:center;">copyWithin()</td><td style="text-align:center;">Tömbelemek másolása a tömbön belül, megadott pozíciókba és megadott pozíciókból.</td></tr><tr><td style="text-align:center;">entries()</td><td style="text-align:center;">Visszaad egy kulcs/érték párost Array Iteration Object</td></tr><tr><td style="text-align:center;">every()</td><td style="text-align:center;">Ellenőrzi, hogy egy tömb minden eleme megfelel-e egy tesztnek.</td></tr><tr><td style="text-align:center;">fill()</td><td style="text-align:center;">Egy tömb elemeinek feltöltése statikus értékkel</td></tr><tr><td style="text-align:center;">filter()</td><td style="text-align:center;">Létrehoz egy új tömböt egy tömb minden olyan elemével, amely átmegy egy teszten.</td></tr><tr><td style="text-align:center;">find()</td><td style="text-align:center;">Visszaadja egy tömb első elemének értékét, amely átment egy teszten.</td></tr><tr><td style="text-align:center;">findIndex()</td><td style="text-align:center;">Visszaadja egy tömb első olyan elemének indexét, amely átment egy teszten.</td></tr><tr><td style="text-align:center;">forEach()</td><td style="text-align:center;">Minden egyes tömbelemhez meghív egy függvényt</td></tr><tr><td style="text-align:center;">from()</td><td style="text-align:center;">Tömböt hoz létre egy objektumból</td></tr><tr><td style="text-align:center;">includes()</td><td style="text-align:center;">Ellenőrzi, hogy egy tömb tartalmazza-e a megadott elemet</td></tr><tr><td style="text-align:center;">indexOf()</td><td style="text-align:center;">Keressen egy elemet a tömbben és adja vissza a pozícióját</td></tr><tr><td style="text-align:center;">isArray()</td><td style="text-align:center;">Ellenőrzi, hogy az objektum tömb-e</td></tr><tr><td style="text-align:center;">join()</td><td style="text-align:center;">Összekapcsolja egy tömb összes elemét egy karakterlánccá</td></tr><tr><td style="text-align:center;">keys()</td><td style="text-align:center;">Visszaad egy Array Iteration objektumot, amely az eredeti tömb kulcsait tartalmazza.</td></tr><tr><td style="text-align:center;">lastIndexOf()</td><td style="text-align:center;">Keressen egy elemet a tömb végén kezdve, és adja vissza a pozícióját.</td></tr><tr><td style="text-align:center;">length</td><td style="text-align:center;">Beállítja vagy visszaadja egy tömb elemeinek számát</td></tr><tr><td style="text-align:center;">map()</td><td style="text-align:center;">Létrehoz egy új tömböt egy függvény meghívásának eredményével minden egyes tömbelemhez.</td></tr><tr><td style="text-align:center;">pop()</td><td style="text-align:center;">Eltávolítja egy tömb utolsó elemét, és visszaadja azt az elemet.</td></tr><tr><td style="text-align:center;">prototype</td><td style="text-align:center;">Lehetővé teszi tulajdonságok és metódusok hozzáadását egy Array objektumhoz.</td></tr><tr><td style="text-align:center;">push()</td><td style="text-align:center;">Új elemeket ad hozzá egy tömb végéhez, és visszaadja az új hosszúságot.</td></tr><tr><td style="text-align:center;">reduce()</td><td style="text-align:center;">Egy tömb értékeinek redukálása egyetlen értékre (balról jobbra haladva)</td></tr><tr><td style="text-align:center;">reduceRight()</td><td style="text-align:center;">Egy tömb értékeinek redukálása egyetlen értékre (jobbról balra haladva)</td></tr><tr><td style="text-align:center;">reverse()</td><td style="text-align:center;">Megfordítja az elemek sorrendjét egy tömbben</td></tr><tr><td style="text-align:center;">shift()</td><td style="text-align:center;">Eltávolítja egy tömb első elemét, és visszaadja azt az elemet.</td></tr><tr><td style="text-align:center;">slice()</td><td style="text-align:center;">Kiválasztja egy tömb egy részét, és visszaadja az új tömböt.</td></tr><tr><td style="text-align:center;">some()</td><td style="text-align:center;">Ellenőrzi, hogy egy tömb bármelyik eleme megfelel-e egy tesztnek.</td></tr><tr><td style="text-align:center;">sort()</td><td style="text-align:center;">Egy tömb elemeinek rendezése</td></tr><tr><td style="text-align:center;">splice()</td><td style="text-align:center;">Elemek hozzáadása/eltávolítása egy tömbből</td></tr><tr><td style="text-align:center;">toString()</td><td style="text-align:center;">Egy tömböt karakterlánccá alakít, és az eredményt visszaadja.</td></tr><tr><td style="text-align:center;">unshift()</td><td style="text-align:center;">Új elemeket ad hozzá egy tömb elejéhez, és visszaadja az új hosszúságot.</td></tr><tr><td style="text-align:center;">valueOf()</td><td style="text-align:center;">Egy tömb primitív értékét adja vissza</td></tr></tbody></table><p><strong>Gyakran használt JavaScript tömb metódusok működés közben</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>common array methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;tiger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bear&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cantaloupe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> dishes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;plate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bowl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cup&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> fruitsAndAnimals <span class="token operator">=</span> fruit<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruitsAndAnimals <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> whereIsTheTiger <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span><span class="token string">&quot;tiger&quot;</span><span class="token punctuation">,</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;The tiger has and index number of: &quot;</span> <span class="token operator">+</span> whereIsTheTiger <span class="token operator">+</span> <span class="token string">&quot; &lt; br &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,102),o=[l];function p(i,r){return n(),s("div",null,o)}const d=a(e,[["render",p],["__file","lesson4.html.vue"]]);export{d as default};
