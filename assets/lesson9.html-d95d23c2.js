import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-6f275e76.js";const t={},o=e(`<h1 id="_9-tananyag" tabindex="-1"><a class="header-anchor" href="#_9-tananyag" aria-hidden="true">#</a> 9. tananyag</h1><h2 id="osztalyok" tabindex="-1"><a class="header-anchor" href="#osztalyok" aria-hidden="true">#</a> Osztályok</h2><p>Már láttuk, hogyan használhatunk szótárat az összefüggő adatok csoportosítására, és hogyan használhatunk függvényeket a gyakran használt utasításcsoportok rövidítésére. Egy függvény egy műveletet hajt végre bizonyos bemeneti paraméterek felhasználásával. Nem minden függvény alkalmazható mindenféle adatra. Az osztályok az összefüggő adatok és az adatokon dolgozó függvények csoportosítására szolgálnak.</p><p>Az osztály egyfajta adattípus, akárcsak a karakterlánc, az egész szám vagy a lista. Amikor egy ilyen adattípusú objektumot hozunk létre, azt egy osztály példányának nevezzük.</p><div class="hint-container tip"><p class="hint-container-title">Entitás</p><p>Az entitás bármely egyedi, azonosítható és különálló objektum. Azokra az egyénekre, szervezetekre, rendszerekre, adatok bitjeire vagy akár különálló rendszerösszetevőkre vonatkozik, amelyeket önmagukban jelentősnek tekintnek.</p><p>A kifejezést számos programozási nyelvben / fogalomban, adatbáziskezelésben, rendszerek tervezésében és más területeken használják.</p></div><p>Mint már említettük, néhány más nyelvben egyes entitások objektumok, mások pedig nem. A Pythonban minden objektum - minden valamilyen osztály példánya. A Python korábbi verzióiban különbséget tettek a beépített típusok és a felhasználó által definiált osztályok között, de ezek ma már teljesen megkülönböztethetetlenek. Az osztályok és típusok maguk is objektumok, és <code>type</code> típusúak. Bármely objektum típusát a <code>type</code> függvény segítségével megtudhatjuk:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">type</span><span class="token punctuation">(</span>any_object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Az objektumon belül tárolt adatértékeket attribútumoknak, az objektumhoz kapcsolódó függvényeket pedig metódusoknak nevezzük. Néhány beépített objektum, például a karakterláncok és a listák metódusait már használtuk.</p><p>Amikor saját objektumokat tervezünk, el kell döntenünk, hogyan fogjuk csoportosítani a dolgokat, és mit fognak az objektumaink képviselni.</p><p>Néha olyan objektumokat írunk, amelyek nagyon intuitív módon illeszkednek a valós világ dolgaihoz. Például, ha kémiai reakciók szimulálására írunk kódot, akkor lehetnek <code>Atom</code> objektumaink, amelyeket kombinálhatunk, hogy egy <code>Molekula</code> objektumot hozzunk létre. Azonban nem mindig szükséges vagy egyáltalán lehetséges, hogy minden kódolt objektum tökéletesen megfeleljen a valós világbeli társaival.</p><p>Néha létrehozhatunk olyan objektumokat, amelyeknek nincs semmilyen valós megfelelőjük, csak azért, mert hasznos bizonyos funkciókat csoportosítani.</p><h3 id="egy-osztaly-definialasa-es-hasznalata" tabindex="-1"><a class="header-anchor" href="#egy-osztaly-definialasa-es-hasznalata" aria-hidden="true">#</a> Egy osztály definiálása és használata</h3><p>Íme egy példa egy egyszerű egyéni osztályra, amely egy Személyre vonatkozó információkat tárol:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">,</span> birthdate<span class="token punctuation">,</span> address<span class="token punctuation">,</span> telephone<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname
        self<span class="token punctuation">.</span>birthdate <span class="token operator">=</span> birthdate

        self<span class="token punctuation">.</span>address <span class="token operator">=</span> address
        self<span class="token punctuation">.</span>telephone <span class="token operator">=</span> telephone
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email

    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>
        age <span class="token operator">=</span> today<span class="token punctuation">.</span>year <span class="token operator">-</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>year

        <span class="token keyword">if</span> today <span class="token operator">&lt;</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">.</span>year<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>month<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>
            age <span class="token operator">-=</span> <span class="token number">1</span>

        <span class="token keyword">return</span> age

person <span class="token operator">=</span> Person<span class="token punctuation">(</span>
    <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>
    datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1992</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;No. 12 Short Street, Greenville&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;555 456 0987&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;jane.doe@example.com&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az osztálydefiníciót az osztály kulcsszóval kezdjük, amelyet az osztály neve és egy kettőspont követ. A kettőspont előtt zárójelek között felsorolnánk a szülő osztályokat, de ennek az osztálynak nincsenek, így kihagyhatjuk őket.</p><p>Az osztályon belül két függvényt definiálunk - ezek az objektumunk metódusai. Az első a <code>__init__</code>, amely egy speciális metódus. Amikor meghívjuk az osztályobjektumot, az osztály egy új példánya jön létre, és az <code>__init__</code> metódus ezen az új objektumon azonnal végrehajtódik az összes paraméterrel, amelyet az osztályobjektumnak átadtunk. A metódus célja tehát egy új objektum létrehozása az általunk megadott adatok felhasználásával.</p><p>A második metódus egy egyéni metódus, amely a születési dátum és az aktuális dátum alapján számítja ki a személy életkorát.</p><div class="hint-container danger"><p class="hint-container-title">❗FONTOS❗</p><p>Az <code>__init__</code>-t az objektum konstruktorának nevezik, mert hasonlóan használják, mint más nyelvekben a konstruktorokat, de ez technikailag nem helyes - jobb, ha inicializálónak hívjuk.</p></div><p>Talán észrevetted, hogy mindkét metódusdefinícióban a <code>self</code> az első paraméter, és ezt a változót használjuk a metóduson belül - viszont nem adjuk át ezt a paramétert. Ennek az az oka, hogy amikor egy objektumon hívunk meg egy metódust, az objektum maga automatikusan átadásra kerül első paraméterként. Ez lehetőséget ad arra, hogy az objektum metódusain belülről elérjük az objektum tulajdonságait.</p><p>Egyes nyelvekben ez a paraméter implicit - azaz nem látható a függvény leírásában -, és egy speciális kulcsszóval érjük el. A Pythonban explicit módon van kitéve. Nem kell <code>self</code>-nek hívni, <strong>de ez egy nagyon erősen követett konvenció.</strong></p><p>Most már láthatod, hogy a <code>__init__</code> függvényünk létrehozza az objektum attribútumait, és beállítja azokat a paraméterként átadott értékekre. Az attribútumoknak és a paramétereknek ugyanazokat a neveket használjuk, de ez nem kötelező.</p><p>Az <code>age</code> függvény nem fogad el paramétereket, kivéve a <code>self</code>-et - <em>mivel csak az objektum attribútumaiban tárolt információkat és az aktuális dátumot használja</em> - amelyet a <code>datetime</code> modul segítségével kérdez le.</p><p>Vegyük észre, hogy a <code>birthdate</code> attribútum maga is egy objektum. A <code>date</code> osztály a <code>datetime</code> modulban van definiálva, és létrehozzuk ennek az osztálynak egy új példányát, amelyet a születési dátum paraméterként használunk, amikor létrehozzuk a <code>Person</code> osztály egy példányát. Nem kell egy köztes változóhoz hozzárendelnünk, mielőtt a <code>Person</code> paramétereként használnánk, egyszerűen létrehozhatjuk a <code>Person</code> hívásakor, ahogyan a többi paraméter string literálját is létrehozzuk.</p><div class="hint-container tip"><p class="hint-container-title">Literál</p><p>A literál nem más, mint a program szövegében direkt módon beleírt adat.</p></div><h3 id="feladat" tabindex="-1"><a class="header-anchor" href="#feladat" aria-hidden="true">#</a> Feladat</h3><p>Magyarázd el, hogy a következő változók mire hivatkoznak, és milyen hatókörrel rendelkeznek:</p><ol><li><code>Person</code></li><li><code>person</code></li><li><code>surname</code></li><li><code>self</code></li><li><code>age</code> (függvény neve)</li><li><code>age</code> (függvényen belül használt változó)</li><li><code>self.email</code></li><li><code>person.email</code></li></ol><details class="hint-container details"><summary>Megoldás</summary><div class="hint-container warning"><p class="hint-container-title">👀</p><ol><li>A <code>Person</code> egy globális szinten definiált <strong>osztály</strong>. Ez egy globális változó.</li><li><code>person</code> a <code>Person</code> osztály egy példánya. Ez is egy globális változó.</li><li><code>surname</code> az <code>__init__</code> metódusba átadott paraméter - ez egy helyi változó az <code>__init__</code> metódusban.</li><li>A <code>self</code> egy paraméter, amelyet az osztály minden egyes példány metódusába átadunk - <em>ez a példány az objektummal lesz helyettesítve, amikor a metódust az objektumon a <code>.</code> operátorral hívjuk meg. Ez egy új helyi változó az egyes metódusokon belül</em> - csak mindig ugyanazzal az értékkel rendelkezik, és a konvenció szerint mindig ugyanazt a nevet kapja, hogy ezt tükrözze.</li><li><code>age</code> a <code>Person</code> osztály egyik metódusa.</li><li>Az <code>age</code> egy helyi változó az <code>age</code> metóduson belül.</li><li>A <code>self.email</code> nem igazán különálló változó. Ez egy példa arra, hogy hogyan hivatkozhatunk egy objektum attribútumaira egy olyan változóval, amely az objektumra, a <code>.</code> operátorral és az attribútum nevére utal. A <code>self</code> változót arra használjuk, hogy egy objektumra hivatkozzunk az objektum egyik saját metódusán belül - bárhol, ahol a <code>self</code> változó definiálva van, használhatjuk a <code>self.email</code>, <code>self.age()</code> stb. változót.</li><li>A <code>person.email</code> egy másik példa ugyanerre. A <code>person</code> példányunkra a <code>person</code> nevű változóval hivatkozunk. Ahol a <code>person</code> definiálva van, ott használhatjuk a <code>person.email</code>, <code>person.age()</code> stb. változót.</li></ol></div></details><h2 id="peldanyok-attributumai" tabindex="-1"><a class="header-anchor" href="#peldanyok-attributumai" aria-hidden="true">#</a> Példányok attribútumai</h2><p>Fontos megjegyezni, hogy az <code>__init__</code> függvényben az objektumra beállított attribútumok nem képezik az összes olyan attribútum listáját, amellyel az objektumunk valaha is rendelkezhet.</p><p>Egyes nyelvekben az osztálydefinícióban meg kell adnunk az objektum attribútumainak listáját, az objektum létrehozásakor placerholdereket hozunk létre ezeknek a megengedett attribútumoknak, és később nem adhatunk hozzá új attribútumokat az objektumhoz. A Pythonban menet közben is hozzáadhatunk új attribútumokat, sőt új metódusokat is az objektumhoz. Valójában semmi különös nincs a <code>__init__</code> függvényben, amikor az attribútumok beállításáról van szó. Az <code>age</code> függvényben tárolhatunk egy gyorsítótárazott életkor értéket az objektumon:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_age

    today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>

    age <span class="token operator">=</span> today<span class="token punctuation">.</span>year <span class="token operator">-</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>year

    <span class="token keyword">if</span> today <span class="token operator">&lt;</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">.</span>year<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>month<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        age <span class="token operator">-=</span> <span class="token number">1</span>

    self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age
    <span class="token keyword">return</span> age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az attribútum vagy metódus nevének aláhúzással (<code>_</code>) való indítása egy olyan konvenció, amelyet arra használunk, hogy jelezzük, hogy ez egy <code>private</code> belső tulajdonság, és nem lehet közvetlenül elérni. Egy reálisabb példában felfoghatjuk úgyis, hogy a gyorsítótárazott értékünk néha lejárna, és újra kellene számolni - <em>ezért mindig az <code>age</code> metódust kellene használnunk, hogy biztosak legyünk benne, hogy a megfelelő értéket kapjuk.</em></p><p>Akár egy teljesen független attribútumot is hozzáadhatunk az objektumon kívülről:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person<span class="token punctuation">.</span>pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">⚠️</p><p>Nagyon gyakori, hogy egy objektum metódusai frissítik az objektum attribútumainak értékeit, de rossz gyakorlatnak számít új attribútumokat létrehozni egy metódusban anélkül, hogy azokat inicializálnánk a <code>__init__</code> metódusban. Az objektumon kívülről történő tetszőleges tulajdonságok beállítása még inkább elítélendő, mivel ez megtöri az objektumorientált paradigmát.</p></div><p>A fenti <code>age</code> példában ellenőriznünk kell, hogy létezik-e <code>_age</code> attribútum az objektumon, mielőtt megpróbáljuk használni, mert ha még nem futtattuk az <code>age</code> metódust, akkor még nem jött létre. Sokkal rendezettebb lenne, ha legalább egyszer meghívnánk ezt a metódust az <code>__init__</code>-ből, hogy biztosak legyünk benne, hogy az <code>_age</code> létrejön, amint létrehozzuk az objektumot.</p><p>Az összes attribútumunk inicializálása az <code>__init__</code>-ben, még ha csak üres értékeket is adunk meg nekik, kevésbé teszi a kódunkat hibaérzékennyé. Emellett könnyebben olvashatóvá és érthetővé is teszi - egy pillantással láthatjuk, hogy milyen attribútumokkal rendelkezik az objektumunk.</p><p>A <code>__init__</code> metódusnak nem kell paramétereket fogadnia (<strong>kivéve a self-et</strong>), és teljesen ki is hagyható.</p><div class="hint-container tip"><p class="hint-container-title">ℹ️</p><h3 id="getattr-setattr-es-hasattr" tabindex="-1"><a class="header-anchor" href="#getattr-setattr-es-hasattr" aria-hidden="true">#</a> <code>getattr</code>, <code>setattr</code> és <code>hasattr</code></h3><p>Mi van akkor, ha egy objektum egy attribútumának értékét szeretnénk lekérdezni vagy beállítani anélkül, hogy azt hardcode-olnánk? Néha előfordulhat, hogy több attribútum nevén akarunk végighaladni, és ugyanazt a műveletet végrehajtani mindegyiken, ahogyan ebben a példában is, amely egy szótárat használ:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Hogyan tehetünk valami hasonlót egy tárggyal? Nem használhatjuk a <code>.</code> operátort, mert azt az attribútum nevének puszta szóként kell követnie. Ha az attribútumnevünket karakterláncértékként tároljuk egy változóban, akkor a <code>getattr</code> függvényt kell használnunk az attribútumérték kinyeréséhez egy objektumból:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>myobject<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vegyük észre, hogy a <code>getattr</code> egy beépített függvény, nem pedig egy metódus az objektumban. Első paraméterként az objektumot veszi fel. A második paraméter a változó neve karakterláncként, a választható harmadik paraméter pedig az alapértelmezett érték, amelyet akkor kell visszaadni, ha az attribútum nem létezik. Ha nem adunk meg alapértelmezett értéket, a <code>getattr</code> kivételt fog generálni, ha az attribútum nem létezik.</p><p>Hasonlóképpen, a <code>setattr</code> lehetővé teszi egy attribútum értékének beállítását. Ebben a példában egy szótárból másolunk adatokat egy objektumba:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token builtin">setattr</span><span class="token punctuation">(</span>myobject<span class="token punctuation">,</span> key<span class="token punctuation">,</span> mydict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>setattr</code> első paramétere az objektum, a második a függvény neve, a harmadik pedig az attribútum új értéke.</p><p>Ahogy az előző <code>age</code> függvény példájában láttuk, a <code>hasattr</code> érzékeli, hogy létezik-e egy attribútum.</p><p>Semmi sem akadályoz meg minket abban, hogy a <code>getattr</code>-t használjuk az attribútumokra, még akkor is, ha a név hardcodeolható, de ez nem ajánlott. Ez az attribútumok elérésének szükségtelenül hosszadalmas és kerülő útja:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">getattr</span><span class="token punctuation">(</span>myobject<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># means the same thing as</span>

myobject<span class="token punctuation">.</span>a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezeket a függvényeket csak akkor használjuk, ha jó okunk van rá.</p></div><h3 id="feladat-1" tabindex="-1"><a class="header-anchor" href="#feladat-1" aria-hidden="true">#</a> Feladat</h3><p>Írja át a <code>Person</code> osztályt úgy, hogy egy személy életkora először akkor kerüljön kiszámításra, amikor egy új példányt hozunk létre. Valamint az életkora kerüljön újra kiszámításra, ha a nap megváltozott a legutóbbi számítás óta.</p><details class="hint-container details"><summary>Megoldás</summary><p>Íme egy lehetséges megoldás:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">,</span> birthdate<span class="token punctuation">,</span> address<span class="token punctuation">,</span> telephone<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname
        self<span class="token punctuation">.</span>birthdate <span class="token operator">=</span> birthdate

        self<span class="token punctuation">.</span>address <span class="token operator">=</span> address
        self<span class="token punctuation">.</span>telephone <span class="token operator">=</span> telephone
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email

        <span class="token comment"># This isn&#39;t strictly necessary, but it clearly introduces these attributes</span>
        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>_age_last_recalculated <span class="token operator">=</span> <span class="token boolean">None</span>

        self<span class="token punctuation">.</span>_recalculate_age<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_recalculate_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>
        age <span class="token operator">=</span> today<span class="token punctuation">.</span>year <span class="token operator">-</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>year

        <span class="token keyword">if</span> today <span class="token operator">&lt;</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">.</span>year<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>month<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>
            age <span class="token operator">-=</span> <span class="token number">1</span>

        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age
        self<span class="token punctuation">.</span>_age_last_recalculated <span class="token operator">=</span> today

    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>_age_last_recalculated<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_recalculate_age<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="az-osztaly-attributumai" tabindex="-1"><a class="header-anchor" href="#az-osztaly-attributumai" aria-hidden="true">#</a> Az osztály attribútumai</h2><p>A <code>Person</code> példányon definiált összes attribútum példányattribútum - az <code>__init__</code> metódus végrehajtásakor kerülnek hozzá a példányhoz. Meghatározhatunk azonban olyan attribútumokat is, amelyek az osztályon vannak beállítva. Ezeket az attribútumokat az osztály minden példányával megosztja. Sok szempontból ugyanúgy viselkednek, mint a példányattribútumok, de van néhány fenntartás, amellyel tisztában kell lennünk.</p><p>Az osztály attribútumokat az osztályban definiáljuk, ugyanazon a behúzási szinten, mint a metódusdefiníciókat (<em>egy szinttel feljebb a metódusok belsejétől</em>):</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>

    TITLES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Dr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mrs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ms&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> title <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>TITLES<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;%s is not a valid title.&quot;</span> <span class="token operator">%</span> title<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>title <span class="token operator">=</span> title
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mint látható, a <code>TITLES</code> osztályattribútumhoz ugyanúgy hozzáférünk, mint egy példány attribútumhoz, amelyet a metóduson belül a <code>self</code> változóval érünk el.<br> Minden általunk létrehozott <code>Person</code> objektumnak ugyanaz a <code>TITLES</code> osztályattribútuma lesz.</p><p>Az osztályattribútumokat gyakran használják olyan konstansok definiálására, amelyek szorosan kapcsolódnak egy adott osztályhoz. Bár az osztályattribútumokat használhatjuk osztálypéldányokból, de használhatjuk őket osztályobjektumokból is, anélkül, hogy példányt hoznánk létre:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># we can access a class attribute from an instance</span>
person<span class="token punctuation">.</span>TITLES

<span class="token comment"># but we can also access it from the class</span>
Person<span class="token punctuation">.</span>TITLES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vegyük észre, hogy az osztályobjektum nem fér hozzá semmilyen példány attribútumhoz - azok csak a példány létrehozásakor jönnek létre!</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># This will give us an error</span>
Person<span class="token punctuation">.</span>name
Person<span class="token punctuation">.</span>surname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az osztályattribútumok néha alapértelmezett attribútumértékek megadására is használhatók:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    deceased <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">mark_as_deceased</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>deceased <span class="token operator">=</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Amikor egy példányon olyan attribútumot állítunk be, amelynek ugyanaz a neve, mint egy osztályattribútumnak, akkor az osztályattribútumot felülbíráljuk egy példányattribútummal, amely elsőbbséget élvez vele szemben. Ha két <code>Person</code> objektumot hozunk létre, és az egyikre meghívjuk a <code>mark_as_deceased</code> metódust, akkor a másikra nem lesz hatással. Óvatosnak kell azonban lennünk, ha egy osztályattribútum változtatható típusú - mert ha helyben módosítjuk, akkor az adott osztály összes objektumát egyszerre fogja érinteni. Ne feledjük, hogy minden példány osztozik ugyanazokon az osztályattribútumokon:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">add_pet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pet<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>pets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pet<span class="token punctuation">)</span>

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
bob <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>

jane<span class="token punctuation">.</span>add_pet<span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>pets<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bob<span class="token punctuation">.</span>pets<span class="token punctuation">)</span> <span class="token comment"># oops!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kimenet:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>[&#39;cat&#39;]
[&#39;cat&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ilyen esetekben a változtatható attribútumot példányattribútumként kell inicializálnunk a <code>__init__</code>-n belül. Ekkor minden példánynak saját külön példánya lesz:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">add_pet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pet<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>pets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pet<span class="token punctuation">)</span>

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
bob <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>

jane<span class="token punctuation">.</span>add_pet<span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>pets<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bob<span class="token punctuation">.</span>pets<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kimenet:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>[&#39;cat&#39;]
[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vegyük észre, hogy a metódusdefiníciók ugyanabban a hatókörben vannak, mint az osztály attribútumdefiníciók, így használhatjuk az osztály attribútumneveket változóként a metódusdefiníciókban (a <code>self</code> nélkül, amely csak a metódusokon belül van definiálva):</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    TITLES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Dr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mrs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ms&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">,</span> allowed_titles<span class="token operator">=</span>TITLES<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> title <span class="token keyword">not</span> <span class="token keyword">in</span> allowed_titles<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;%s is not a valid title.&quot;</span> <span class="token operator">%</span> title<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>title <span class="token operator">=</span> title
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lehetnek osztály metódusaink is? Igen, lehetnek. A következő részben megnézzük, hogyan definiálhatjuk őket egy dekorátor segítségével.</p><h3 id="feladat-2" tabindex="-1"><a class="header-anchor" href="#feladat-2" aria-hidden="true">#</a> Feladat</h3><p>Magyarázza el, hogy mi a különbség a név (<code>name</code>), a vezetéknév (<code>surname</code>) és a foglalkozás (<code>profession</code>) attribútumok között, és milyen értékeket vehetnek fel az osztály különböző példányaiban:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Smith</span><span class="token punctuation">:</span>
    surname <span class="token operator">=</span> <span class="token string">&quot;Smith&quot;</span>
    profession <span class="token operator">=</span> <span class="token string">&quot;smith&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profession<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token keyword">if</span> profession <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>profession <span class="token operator">=</span> profession
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Megoldás</summary><div class="hint-container warning"><p class="hint-container-title">✅</p><p><code>name</code> mindig egy példány attribútum, amely a konstruktorban kerül beállításra, és minden egyes osztálypéldánynak más-más name értéke lehet. <code>surname</code> mindig egy osztály attribútum, és nem írható felül a konstruktorban (<code>__init__</code>-ben) - minden példánynak <code>Smith</code> lesz a <code>surname</code> értéke. <code>profession</code> egy osztály attribútum, de opcionálisan felülírható egy példány attribútummal a konstruktorban. Minden példány <code>profession</code> értéke <code>smith</code> lesz, kivéve, ha a konstruktorban az opcionális vezetéknév paramétert más értékkel adjuk meg.</p></div></details><h2 id="osztaly-dekoratorok" tabindex="-1"><a class="header-anchor" href="#osztaly-dekoratorok" aria-hidden="true">#</a> Osztály dekorátorok</h2><p>Az előző fejezetben már találkoztunk a dekorátorokkal. Van néhány beépített dekorátor, amelyeket gyakran használunk az osztálydefiníciókban.</p><h3 id="classmethod" tabindex="-1"><a class="header-anchor" href="#classmethod" aria-hidden="true">#</a> <code>@classmethod</code></h3><p>Ahogyan definiálhatunk osztályattribútumokat, amelyeket egy osztály minden példánya megoszt, úgy definiálhatunk osztálymetódusokat is. Ezt úgy tehetjük meg, hogy a <code>@classmethod</code> dekorátorral díszítünk egy közönséges metódust.</p><p>Egy osztály metódus első paramétere továbbra is a hívó objektum, de a konvenció szerint ezt a paramétert átnevezzük <code>self</code>-ről <code>cls</code>-re. Ha az osztály metódust egy példányból hívjuk, akkor ez a paraméter a példány objektumot tartalmazza, de ha az osztályból hívjuk, akkor az osztály objektumot tartalmazza. A <code>cls</code> paraméter megnevezésével emlékeztetjük magunkat arra, hogy garantáltan nem rendelkezik példánytulajdonságokkal.</p><p>Mire jók az osztály metódusok? Néha vannak olyan, egy osztályhoz kapcsolódó feladatok, amelyeket konstansok és más osztályattribútumok segítségével végezhetünk el anélkül, hogy osztálypéldányokat kellene létrehoznunk. Ha ezekhez a feladatokhoz példány metódusokat kellene használnunk, akkor ok nélkül kellene létrehoznunk egy példányt, ami pazarlás lenne. Néha pusztán azért írunk osztályokat, hogy a kapcsolódó konstansokat és a rájuk ható függvényeket csoportosítsuk - lehet, hogy ezeket az osztályokat soha nem is példányosítjuk.</p><p>Néha hasznos egy olyan osztály metódust írni, amely a bemenet feldolgozása után létrehozza az osztály egy példányát, hogy az megfelelő formátumban átadható legyen az osztály konstruktorának. Ez lehetővé teszi, hogy a konstruktor egyszerű legyen, és ne kelljen bonyolult elemző vagy tisztító kódot implementálni:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">,</span> birthdate<span class="token punctuation">,</span> address<span class="token punctuation">,</span> telephone<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token comment"># (...)</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">from_text_file</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># extract all the parameters from the text file</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span> <span class="token comment"># this is the same as calling Person(*params)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="staticmethod" tabindex="-1"><a class="header-anchor" href="#staticmethod" aria-hidden="true">#</a> <code>@staticmethod</code></h3><p>Egy statikus metódusnak nem a hívó objektumot kell első paraméterként átadni. Ez azt jelenti, hogy egyáltalán nem fér hozzá az osztály vagy a példány többi részéhez. Meghívhatjuk egy példányból vagy egy osztályobjektumból, de leggyakrabban az osztályobjektumokból hívjuk őket, mint az osztálymódszereket.</p><p>Ha egy osztályt olyan kapcsolódó metódusok csoportosítására használunk, amelyeknek nem kell hozzáférniük egymáshoz vagy az osztály egyéb adataihoz, akkor érdemes ezt a technikát használni. A statikus metódusok használatának előnye, hogy kiküszöböljük a felesleges <code>cls</code> vagy <code>self</code> paramétereket a metódusdefinícióinkból. Hátránya, hogy ha időnként egy statikus metóduson belül egy másik osztály metódusára vagy attribútumára akarunk hivatkozni, akkor az osztály nevét teljes egészében ki kell írnunk, ami sokkal terjedelmesebb lehet, mint az osztály metódusán belül rendelkezésünkre álló <code>cls</code> változó használata.</p><p>Íme egy rövid példa a három módszer összehasonlítására:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    TITLES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Dr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mrs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ms&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname

    <span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># instance method</span>
        <span class="token comment"># instance object accessible through self</span>
        <span class="token keyword">return</span> <span class="token string">&quot;%s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>surname<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">allowed_titles_starting_with</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> startswith<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># class method</span>
        <span class="token comment"># class or instance object accessible through cls</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>t <span class="token keyword">for</span> t <span class="token keyword">in</span> cls<span class="token punctuation">.</span>TITLES <span class="token keyword">if</span> t<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>startswith<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">allowed_titles_ending_with</span><span class="token punctuation">(</span>endswith<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># static method</span>
        <span class="token comment"># no parameter for class or instance object</span>
        <span class="token comment"># we have to use Person directly</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>t <span class="token keyword">for</span> t <span class="token keyword">in</span> Person<span class="token punctuation">.</span>TITLES <span class="token keyword">if</span> t<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>endswith<span class="token punctuation">)</span><span class="token punctuation">]</span>


jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>fullname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>allowed_titles_starting_with<span class="token punctuation">(</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>allowed_titles_starting_with<span class="token punctuation">(</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>allowed_titles_ending_with<span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>allowed_titles_ending_with<span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="property" tabindex="-1"><a class="header-anchor" href="#property" aria-hidden="true">#</a> <code>@property</code></h3><p>Néha egy metódust használunk egy objektum egy tulajdonságának dinamikus generálására, kiszámítva azt az objektum többi tulajdonságából. Néha egyszerűen csak egy metódust használunk egyetlen attribútum elérésére és visszaadására. Egy másik metódust is használhatunk az attribútum értékének frissítésére ahelyett, hogy közvetlenül hozzáférnénk az attribútumhoz. Az ilyen metódusokat <code>getter</code>-eknek és <code>setter</code>-eknek nevezzük, mivel az attribútumok értékét &quot;<strong>megszerzik</strong>&quot;, illetve &quot;<strong>beállítják</strong>&quot;.</p><p>Egyes nyelvekben arra ösztönzik, hogy minden attribútumhoz <code>getter</code>-eket és <code>setter</code>-eket használjunk, és soha ne érjük el közvetlenül az értéküket - és vannak olyan nyelvi jellemzők, amelyek az attribútumokat elérhetetlenné tehetik, kivéve a <code>setter</code>-eken és <code>getter</code>-eken keresztül. A Pythonban az egyszerű attribútumok közvetlen elérése tökéletesen elfogadható, és az összes attribútumhoz <code>getter</code>-eket és <code>setter</code>-eket írni feleslegesen hosszadalmasnak tekinthető. A <code>setter</code>-ek azért lehetnek kényelmetlenek, mert nem teszik lehetővé az összetett hozzárendelési operátorok használatát:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height

    <span class="token keyword">def</span> <span class="token function">get_height</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>height

    <span class="token keyword">def</span> <span class="token function">set_height</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span> <span class="token comment"># Jane is 153cm tall</span>

jane<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># Jane grows by a centimetre</span>
jane<span class="token punctuation">.</span>set_height<span class="token punctuation">(</span>jane<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># Jane grows again</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Amint láthatjuk, a <code>height</code> attribútum növelése egy <code>setter</code>-en keresztül sokkal bőbeszédűbb. Természetesen írhatnánk egy második <code>setter</code>-t is, amely az attribútumot a megadott paraméterrel növeli - de akkor minden attribútumhoz és minden egyes módosításhoz, amit el akarunk végezni, valami hasonlót kellene tennünk. Hasonló problémánk lenne a helyben történő módosításokkal, például az értékek hozzáadásával listákhoz.</p><p>Ami gyakran a <code>setter</code>-ek és <code>getter</code>-ek előnyének tekinthető, az az, hogy megváltoztathatjuk egy attribútum generálásának módját az objektumon belül anélkül, hogy ez hatással lenne az objektumot használó kódra. Tegyük fel például, hogy kezdetben létrehoztunk egy <code>Person</code> osztályt, amely rendelkezik egy <code>fullname</code> attribútummal, de később meg akarjuk változtatni az osztályt úgy, hogy külön <code>name</code> és <code>surname</code> attribútumokkal rendelkezzen, amelyeket kombinálunk a teljes név létrehozásához. Ha a <code>fullname</code> attribútumot mindig egy setteren keresztül érjük el, akkor egyszerűen átírhatjuk a settert - a settert hívó kódot nem kell megváltoztatni.</p><p>De mi van akkor, ha a kódunk közvetlenül a <code>fullname</code> attribútumhoz fér hozzá? Írhatunk egy <code>fullname</code> metódust, amely visszaadja a megfelelő értéket, de egy metódust meg kell hívni. Szerencsére a <code>@property</code> dekorátor lehetővé teszi, hogy egy metódus úgy viselkedjen, mint egy attribútum:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;%s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>surname<span class="token punctuation">)</span>

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>fullname<span class="token punctuation">)</span> <span class="token comment"># no brackets!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vannak olyan dekorátorok is, amelyekkel definiálhatunk egy <code>setter</code>-t és egy <code>deleter</code>-t az attribútumunkhoz (a <code>deleter</code> törli az attribútumot az objektumunkból). A <code>getter</code>, <code>setter</code> és <code>deleter</code> metódusoknak azonos nevűnek kell lenniük:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;%s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>surname<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@fullname<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># this is much more complicated in real life</span>
        name<span class="token punctuation">,</span> surname <span class="token operator">=</span> value<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname

    <span class="token decorator annotation punctuation">@fullname<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>name
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>surname

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>fullname<span class="token punctuation">)</span>

jane<span class="token punctuation">.</span>fullname <span class="token operator">=</span> <span class="token string">&quot;Jane Doe&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>fullname<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">.</span>surname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="feladat-3" tabindex="-1"><a class="header-anchor" href="#feladat-3" aria-hidden="true">#</a> Feladat</h3><ol><li><p>Hozzon létre egy <code>Numbers</code> nevű osztályt, amelynek egyetlen osztályattribútuma a <code>MULTIPLIER</code>, és egy konstruktor, amely az <code>x</code> és <code>y</code> paramétereket veszi fel (ezek mind számok).</p><ol start="2"><li>Írjunk egy <code>add</code> nevű metódust, amely az <code>x</code> és <code>y</code> attribútumok összegét adja vissza.</li><li>Írjunk egy <code>multiply</code> nevű osztálymetódust, amely egyetlen szám paramétert vesz fel <code>a</code>. <code>MULTIPLIER</code> és az <code>a</code> szorzatát adja vissza (<code>return</code>).</li><li>Írjunk egy statikus metódust <code>subtract</code> néven, amely két számparamétert, <code>b</code>-t és <code>c</code>-t vesz fel, és <code>b</code> - <code>c</code>-t adja vissza.</li><li>Írjunk egy <code>value</code> nevű metódust, amely egy olyan <code>tuple</code>-t ad vissza, amely <code>x</code> és <code>y</code> értékeit tartalmazza. Tegyük ezt a metódust <code>property</code>-vé, és írjunk egy <code>setter</code>-t és egy <code>deleter</code>-t az <code>x</code> és <code>y</code> értékeinek manipulálására.</li></ol></li></ol><details class="hint-container details"><summary>Megoldás</summary><p>Íme egy lehetséges megoldás:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Numbers</span><span class="token punctuation">:</span>
    MULTIPLIER <span class="token operator">=</span> <span class="token number">3.5</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>y

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>MULTIPLIER <span class="token operator">*</span> a

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> b <span class="token operator">-</span> c

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@value<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> xy_tuple<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">=</span> xy_tuple

    <span class="token decorator annotation punctuation">@value<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>x
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="metodusok-felulirasa" tabindex="-1"><a class="header-anchor" href="#metodusok-felulirasa" aria-hidden="true">#</a> Metódusok felülírása</h2><p>Már láttuk, hogyan lehet a <code>__init__</code> metódust túlterhelni, hogy az osztályunk inicializálásához igazíthassuk. Más speciális metódusokat is túlterhelhetünk. Például az <code>__str__</code> metódus célja, hogy az objektumunkról egy használható string reprezentációt adjon ki. De alapértelmezés szerint, ha az <code>str</code> függvényt használjuk egy <code>person</code> objektumon (<em>ami meghívja az <code>__str__</code> metódust</em>), akkor csak az osztály nevét és egy azonosítót kapunk. Ez nem túl hasznos! Írjunk egy saját <code>__str__</code> metódust, amely megmutatja az objektum összes tulajdonságának értékét:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">,</span> birthdate<span class="token punctuation">,</span> address<span class="token punctuation">,</span> telephone<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname
        self<span class="token punctuation">.</span>birthdate <span class="token operator">=</span> birthdate

        self<span class="token punctuation">.</span>address <span class="token operator">=</span> address
        self<span class="token punctuation">.</span>telephone <span class="token operator">=</span> telephone
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;%s %s, born %s\\nAddress: %s\\nTelephone: %s\\nEmail:%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>surname<span class="token punctuation">,</span> self<span class="token punctuation">.</span>birthdate<span class="token punctuation">,</span> self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> self<span class="token punctuation">.</span>telephone<span class="token punctuation">,</span> self<span class="token punctuation">.</span>email<span class="token punctuation">)</span>

jane <span class="token operator">=</span> Person<span class="token punctuation">(</span>
    <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>
    datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1992</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;No. 12 Short Street, Greenville&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;555 456 0987&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;jane.doe@example.com&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>jane<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vegyük figyelembe, hogy amikor a születési dátum objektumot a kimeneti karakterláncba illesztjük <code>%s</code>-el, az maga is karakterlánccá alakul, így ezt nem kell nekünk megtennünk (<em>hacsak nem akarjuk megváltoztatni a formátumot</em>).</p><p>Gyakran hasznos az összehasonlító metódusok túlterhelése is, így összehasonlító operátorokat használhatunk a person objektumainkon. Alapértelmezés szerint a <code>person</code> objektumaink csak akkor egyenlőek, ha ugyanaz az objektum, és nem tudjuk tesztelni, hogy az egyik <code>person</code> objektum nagyobb-e egy másiknál, mert a person objektumoknak nincs alapértelmezett sorrendje.</p><p>Tegyük fel, hogy azt szeretnénk, hogy a személy objektumaink akkor legyenek egyenlőek, ha minden attribútumuk azonos értékkel rendelkezik, és szeretnénk, ha a vezetéknév, majd a keresztnév alapján ábécérendbe tudnánk rendezni őket. Az összes összehasonlító módszer független egymástól, így mindegyiket túl kell terhelnünk, ha azt akarjuk, hogy mindegyik működjön - de szerencsére, ha már egyszer definiáltuk az egyenlőséget és az egyik alapvető sorrendezési módszert, a többi könnyen elvégezhető. Mindegyik metódus két paramétert vesz fel - <code>self</code> az aktuális objektumhoz, és <code>other</code> a másik objektumhoz:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> surname<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>surname <span class="token operator">=</span> surname

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># does self == other?</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>surname <span class="token operator">==</span> other<span class="token punctuation">.</span>surname

    <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># is self &gt; other?</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>surname <span class="token operator">==</span> other<span class="token punctuation">.</span>surname<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>name
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>surname <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>surname

    <span class="token comment"># now we can define all the other methods in terms of the first two</span>

    <span class="token keyword">def</span> <span class="token function">__ne__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># does self != other?</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self <span class="token operator">==</span> other <span class="token comment"># this calls self.__eq__(other)</span>

    <span class="token keyword">def</span> <span class="token function">__le__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># is self &lt;= other?</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self <span class="token operator">&gt;</span> other <span class="token comment"># this calls self.__gt__(other)</span>

    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># is self &lt; other?</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>self <span class="token operator">&gt;</span> other <span class="token keyword">or</span> self <span class="token operator">==</span> other<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__ge__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># is self &gt;= other?</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self <span class="token operator">&lt;</span> other
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vegyük figyelembe, hogy az <code>other</code> nem garantáltan egy másik személy objektum, és nem is tettünk bele semmilyen ellenőrzést annak biztosítására, hogy ez így is legyen. A módszerünk összeomlik, ha a másik objektum nem rendelkezik név vagy vezetéknév attribútummal, de ha ezek jelen vannak, az összehasonlítás működni fog. Hogy ennek van-e értelme vagy sem, azt majd át kell gondolnunk, ha hasonló típusú objektumokat hozunk létre.</p><p>Néha van értelme hibával kilépni, ha a másik objektum nem ugyanolyan típusú, mint a mi objektumunk, de néha két kompatibilis objektumot akkor is össze tudunk hasonlítani, ha nem azonos típusúak. Például van értelme összehasonlítani az <code>1</code>-et és a <code>2,5</code>-öt, mert mindkettő szám, még akkor is, ha az egyik <code>integer</code>, a másik pedig <code>float</code>.</p>`,104),l=[o];function p(i,c){return a(),s("div",null,l)}const d=n(t,[["render",p],["__file","lesson9.html.vue"]]);export{d as default};
