import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-6f275e76.js";const t={},p=e(`<h1 id="_7-tananyag" tabindex="-1"><a class="header-anchor" href="#_7-tananyag" aria-hidden="true">#</a> 7. tananyag</h1><h2 id="ismerkedes-a-funkciokkal" tabindex="-1"><a class="header-anchor" href="#ismerkedes-a-funkciokkal" aria-hidden="true">#</a> Ismerkedés a funkciókkal</h2><p>Ebben a fejezetben</p><ul><li>Írásfunkciók</li><li>Funkciók dokumentálása</li><li>Paraméterek átadása</li><li>Értékek visszaadása</li><li>Programok szervezése függvényekkel</li></ul><p>A függvények segítenek csökkenteni a kód ismétlődését azáltal, hogy a gyakran használt kódrészeket újrafelhasználható részekké alakítják. Ebben a fejezetben írsz néhány függvényt, és használod őket, hogy az egyébként unalmas feladatokat egyszerűvé és szórakoztatóvá tedd!</p><h3 id="a-funkciok-megertese" tabindex="-1"><a class="header-anchor" href="#a-funkciok-megertese" aria-hidden="true">#</a> A funkciók megértése</h3><p>A függvények mini programok a programokon belül. A függvények a főprogramon belül bizonyos feladatok elvégzésére szolgálnak, amelyekre a program különböző részeinek többször is szükségük lehet.</p><p>Ha elolvastad az előző fejezetek bármelyikét, láthattál néhány függvényt működés közben. A következő példa egy egyszerű függvény, amely futtatásakor egyszerűen hozzáad egy z-t egy karakterlánc végéhez.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addZ</span><span class="token punctuation">(</span><span class="token parameter">astring</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    aString <span class="token operator">+=</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> aString<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A funkció kipróbálásához kövesd az alábbi lépéseket:</p><ol><li><p>Nyisd meg a JavaScript konzolt a Chrome-ban.</p></li><li><p>Írd be a funkciót.<br> Beírhatod az egészet egy sorban, vagy minden sor után megnyomhatod a Shift+Enter vagy a Shift+Return billentyűkombinációt, hogy a kód végrehajtása nélkül sortörést hozzon létre.</p></li><li><p>Nyomd meg a Return vagy az Enter billentyűt az utolsó görbe zárójel után. A konzolnak ki kell írnia, hogy undefined.</p></li><li><p>A függvény futtatásához írd be a következő parancsot, majd a Return vagy az Enter billentyűt:</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addZ</span><span class="token punctuation">(</span><span class="token string">&quot;I have JavaScript skill&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A függvények a JavaScript programozás alapvető részét képezik, és a<br> sok szabály és különleges képesség, amelyekkel JavaScript-kódolóként tisztában kell lenned. Ne aggódj, ha nem vagy képes megjegyezni minden egyes részletet a függvényekről. Némi gyakorlásra lesz szükség ahhoz, hogy megérts néhány absztraktabb fogalmat, és még az is lehet, hogy újra el kell olvasnod ezt a fejezetet. Végül minden világos lesz számodra, csak tarts ki!</p><h3 id="funkcionalis-kifejezesek-hasznalata" tabindex="-1"><a class="header-anchor" href="#funkcionalis-kifejezesek-hasznalata" aria-hidden="true">#</a> Funkcionális kifejezések használata</h3><p>A programozók számos olyan szót használnak, amelyeket fontos megérteni, amikor függvényekről beszélnek. Ezeket a szavakat ebben a fejezetben és a könyvben is gyakran használjuk. A következő lista egy gyors összefoglaló néhány szakkifejezésről, amelyekkel találkozhatsz, amikor függvényekkel dolgozol.</p><h3 id="definialj-egy-fuggvenyt" tabindex="-1"><a class="header-anchor" href="#definialj-egy-fuggvenyt" aria-hidden="true">#</a> Definiálj egy függvényt</h3><p>Amikor egy függvény megjelenik a JavaScript-kódban, nem fut le. Egyszerűen csak létrehozzuk és elérhetővé tesszük későbbi használatra. A függvény létrehozását, hogy később felhasználható legyen, függvény definiálásának nevezzük.<br> Egy függvényt csak egyszer kell definiálni egy programban vagy egy weboldalon. Ha azonban véletlenül többször definiáljuk ugyanazt a függvényt, a JavaScript nem fog reklamálni. Egyszerűen a függvény legutóbb definiált változatát fogja használni.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myFunction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vagy</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fuggvenyfej" tabindex="-1"><a class="header-anchor" href="#fuggvenyfej" aria-hidden="true">#</a> Függvényfej</h3><p>A függvényfej a függvénydefiníciónak az a része, amely tartalmazza a függvény kulcsszavát, a függvény nevét és a zárójeleket.</p><p>Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fuggveny-torzse" tabindex="-1"><a class="header-anchor" href="#fuggveny-torzse" aria-hidden="true">#</a> Függvény törzse</h3><p>A függvény törzsét a függvény szögletes zárójelek közötti utasítások alkotják.</p><p>Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// function body</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fuggveny-hivasa" tabindex="-1"><a class="header-anchor" href="#fuggveny-hivasa" aria-hidden="true">#</a> Függvény hívása</h3><p>Amikor egy függvényt használsz, azt hívjuk a függvény meghívásának. A függvény meghívása a függvénytestben lévő utasítások végrehajtását eredményezi.</p><p>Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Paraméterek definiálása és argumentumok átadása</p><p>A paraméterek olyan nevek, amelyeket olyan adatdaraboknak adunk, amelyeket egy függvény meghívásakor adunk meg. Az argumentumok a függvényeknek megadott értékek. Amikor egy függvényt argumentumokkal hívunk meg (a függvény megadott paraméterei szerint), a programozók ezt úgy nevezik, hogy az argumentumok átadása a függvénynek.</p><p>A paraméterek meghatározásának szintaxisa a következő:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">parameter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A függvények argumentummal történő hívásának szintaxisa a következő:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">myFunction</span><span class="token punctuation">(</span>myArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ertekvisszaadas" tabindex="-1"><a class="header-anchor" href="#ertekvisszaadas" aria-hidden="true">#</a> Értékvisszaadás</h3><p>Amellett, hogy a függvények képesek a külvilágtól bemenetet fogadni, a futás befejezése után értékeket is küldhetnek vissza. Amikor egy függvény visszaküld valamit, azt értékvisszaadásnak nevezzük.</p><p>Egy érték visszaadásához használd a return kulcsszót.</p><p>Például:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> myValue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="a-funkciok-hasznalatanak-elonyei" tabindex="-1"><a class="header-anchor" href="#a-funkciok-hasznalatanak-elonyei" aria-hidden="true">#</a> A funkciók használatának előnyei</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Get the total<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> myNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>oneNumber <span class="token keyword">in</span> myNumbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">=</span> total <span class="token operator">+</span> myNumbers<span class="token punctuation">[</span>oneNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha azonban több összeadandó számsorozatunk lenne, akkor minden egyes új számsorozathoz egy új ciklus utasítást kellene írnunk.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Get the sum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token doc-comment comment">/**
        *Adds elements in an array
        *<span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">.</span><span class="token punctuation">&lt;</span>number<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> <span class="token parameter">numbersToAdd</span> 
        *<span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> sum
      */</span>
      <span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token parameter">numbersToAdd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>oneNumber <span class="token keyword">in</span> numbersToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          sum <span class="token operator">=</span> sum <span class="token operator">+</span> numbersToAdd<span class="token punctuation">[</span>oneNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">var</span> myNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> myNumbers2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3333</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> myNumbers3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">777</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> sum1 <span class="token operator">=</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>myNumbers2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> sum3 <span class="token operator">=</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>myNumbers3<span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum1 <span class="token operator">+</span> <span class="token string">&quot; &lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum2 <span class="token operator">+</span> <span class="token string">&quot; &lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum3 <span class="token operator">+</span> <span class="token string">&quot; &lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript-dokumentalasa-jsdoc-segitsegevel" tabindex="-1"><a class="header-anchor" href="#javascript-dokumentalasa-jsdoc-segitsegevel" aria-hidden="true">#</a> JavaScript dokumentálása JSDoc segítségével</h3><p>Jó gyakorlat, hogy a JavaScript kódot mindig szabványos rendszerrel dokumentáljuk. A legszélesebb körben használt JavaScript dokumentációs rendszer, és így a de facto szabvány a JSDoc.</p><p>A JSDoc nyelv egy egyszerű jelölőnyelv, amelyet a JavaScript-fájlok belsejébe lehet beilleszteni. A JSDoc jelenleg harmadik verziója a JavaDoc rendszeren alapul, amelyet a Java programozási nyelven írt kód dokumentálására használnak.<br> Miután a JavaScript-fájlokat JSDoc-kal megjegyzésekkel látta el, a kódot dokumentáló HTML-fájlok létrehozásához használhatsz egy dokumentáció-generátort, például a jsdoc-toolkit-et.</p><p>A JSDoc-jelölés speciális blokkkommentáló címkékbe kerül. Az egyetlen különbség a JSDoc-jelölés és a normál JavaScript blokkkommentárok között az, hogy a JSDoc-jelölés /**-mal kezdődik és */-vel végződik, míg a normál JavaScript-blokkkommentárok csak egy csillagot igényelnek a kezdővonal után. A JSDoc-jelölésekben lévő extra csillag lehetővé teszi, hogy normál blokkidézőjeleket hozzon létre anélkül, hogy azok a generált dokumentáció részét képeznék.</p><p>Az ábra a nyílt forráskódú Angular JS JavaScript keretrendszer néhány kódját mutatja, amelyet a JSDoc segítségével jegyzeteltünk.</p><p>Egy program különböző részei és aspektusai dokumentálhatók a JSDoc segítségével JDDoc címkékkel. Itt vannak a legnépszerűbb címkék:</p><table><thead><tr><th style="text-align:center;">JSDoc Tag</th><th style="text-align:center;">Magyarázat</th></tr></thead><tbody><tr><td style="text-align:center;">@author</td><td style="text-align:center;">A programozó neve</td></tr><tr><td style="text-align:center;">@constructor</td><td style="text-align:center;">Jelzi, hogy a függvény konstruktor.</td></tr><tr><td style="text-align:center;">@deprecated</td><td style="text-align:center;">Jelzi, hogy a módszer elavult</td></tr><tr><td style="text-align:center;">@exception</td><td style="text-align:center;">Egy metódus által dobott kivételt ír le; a @throws szinonimája.</td></tr><tr><td style="text-align:center;">@exports</td><td style="text-align:center;">Meghatároz egy olyan tagot, amelyet a modul exportál.</td></tr><tr><td style="text-align:center;">@param</td><td style="text-align:center;">Egy metódus paraméterét írja le</td></tr><tr><td style="text-align:center;">@private</td><td style="text-align:center;">Egy tag privát jellegét jelzi</td></tr><tr><td style="text-align:center;">@return</td><td style="text-align:center;">Egy visszatérési értéket ír le. A @returns szinonimája</td></tr><tr><td style="text-align:center;">@returns</td><td style="text-align:center;">Leír egy visszatérési értéket. A @return szinonimája</td></tr><tr><td style="text-align:center;">@see</td><td style="text-align:center;">Egy másik objektumhoz való hozzárendelést rögzít</td></tr><tr><td style="text-align:center;">@this</td><td style="text-align:center;">Megadja annak az objektumnak a típusát, amelyre a this kulcsszó utal egy függvényen belül.</td></tr><tr><td style="text-align:center;">@throws</td><td style="text-align:center;">Egy metódus által dobott kivételt ír le.</td></tr><tr><td style="text-align:center;">@version</td><td style="text-align:center;">Megadja egy könyvtár verziószámát</td></tr></tbody></table><p>A funkciók nagyszerű idő-, munka- és helytakarékosságot jelentenek. Egy hasznos függvény megírása kezdetben hosszabb időt vehet igénybe, mint a függvényeken kívüli JavaScript-kód megírása, de hosszú távon a programjaid jobban szervezettek lesznek, és sok fejfájástól kíméled meg magad, ha rászoksz a függvények írására.</p><h3 id="funkciok-irasa" tabindex="-1"><a class="header-anchor" href="#funkciok-irasa" aria-hidden="true">#</a> Funkciók írása</h3><p>A függvénydeklarációt meghatározott sorrendben kell megírni. A függvénydeklaráció a következő elemekből áll, ebben a sorrendben:</p><ul><li>Funkció kulcsszó</li><li>A függvény neve</li><li>Zárójelek, amelyek egy vagy több paramétert tartalmazhatnak.</li><li>utasításokat tartalmazó szögletes zárójelek párja</li></ul><p>Néha egy függvénynek az a célja, hogy egy üzenetet írjon a képernyőre egy weboldalon. Egy példa arra, amikor egy ilyen függvény hasznos lehet, az aktuális dátum megjelenítése. A következő példafüggvény kiírja az aktuális dátumot a böngésző ablakába:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getTheDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> rightNow <span class="token operator">=</span> <span class="token function">newDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>rightNow<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kövesd az alábbi lépéseket a funkció kipróbálásához:</p><ol><li><p>Nyisd meg a JavaScript konzolt a Chrome-ban.</p></li><li><p>Írd be a funkciót a konzolba.<br> Használd a Shift + Return (vagy Shift + Enter) billentyűkombinációt minden egyes sor beírása után, hogy a kód végrehajtása nélkül sortörést hozz létre a konzolon.</p></li><li><p>Az utolsó <code>}</code> beírása után nyomd le a Return (vagy Enter) billentyűt a kód futtatásához.<br> Vedd észre, hogy semmi sem történik, kivéve, hogy a konzolon megjelenik az <code>undefined</code> szó, amely tudatja, hogy a függvényt elfogadták, de nem adott vissza értéket.</p></li><li><p>Hívd meg a függvényt a függvény nevének (<code>getTheDate</code>) beírásával, amelyet zárójel, majd pontosvessző követ:</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">getTheDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A függvény kiírja az aktuális dátumot és időt a böngészőablakba, majd a konzolon megjelenik a undefined, mivel a függvénynek nincs visszatérési értéke; célja egyszerűen a dátum kiírása a böngészőablakba.</p><div class="hint-container tip"><p class="hint-container-title">Megjegyzés</p><p>A függvények alapértelmezett visszatérési értéke undefined, tehát technikailag az undefined egy visszatérési érték.</p></div><p>Visszatérési értékek</p><p>Az előző szakaszban bemutatott példában egy olyan függvényt hozunk létre, amely csak egy karakterláncot ír ki a böngésző ablakába. Az egyetlen <code>document.write</code> utasítás végrehajtása után nincs több futtatandó utasítás, ezért a program kilép a függvényből, és a függvényhívás után a következő utasítással folytatódik.</p><p>A legtöbb függvény a munka elvégzése után visszaad egy értéket (a meghatározatlanon kívül). Ezt az értéket aztán felhasználhatod a program többi részében. A minta egy olyan függvényt mutat, amely visszaad egy értéket. A függvény visszatérési értékét ezután egy változóhoz rendeljük, és kiírjuk a konzolra.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> helloText <span class="token operator">=</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>helloText<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>return</code> utasítás általában az utolsó utasítás a függvényben. Amikor végrehajtódik, a függvény kilép. A <code>return</code> utasítással bármilyen típusú literális értéket (például &quot;Hello!&quot; vagy 3) küldhetsz a függvényen kívülre, vagy visszaadhatod egy változó, kifejezés, tömb vagy objektum értékét, vagy akár egy másik függvény értékét is!</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getCircumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> radius <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCircumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="argumentumok-atadasa-es-hasznalata" tabindex="-1"><a class="header-anchor" href="#argumentumok-atadasa-es-hasznalata" aria-hidden="true">#</a> Argumentumok átadása és használata</h3><p>Ahhoz, hogy a függvények különböző bemenetekkel ugyanazt a dolgot tudják elvégezni, szükségük van arra, hogy a programozók megadhassák nekik a bemenetet.</p><p>A fejezet korábbi látott kódjaiban a függvény neve után a deklarációban a zárójelek a függvény paramétereinek megadására szolgálnak.</p><div class="hint-container warning"><p class="hint-container-title">Fontos!</p><p>A paraméterek és az argumentumok közötti különbség elsőre zavaró lehet. A következőképpen működik:</p><ul><li>A paraméterek a függvény definíciójában megadott nevek.</li><li>Az argumentumok a függvénynek átadott értékek. Ezek az értékek a paraméterek nevét veszik fel, amikor átadjuk őket.</li></ul></div><p>Amikor egy függvényt hívsz, adatokat (argumentumokat) adsz meg azokon a helyeken, ahol a függvénydefiníciónak paraméterei vannak. Vedd figyelembe, hogy az átadott argumentumok a függvénynek átadott argumentumokat ugyanabban a sorrendben kell felsorolni, mint a függvénydefinícióban szereplő paramétereket.</p><p>A következő függvényben két paramétert definiálunk a <code>myTacos</code> függvényhez:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myTacos</span><span class="token punctuation">(</span><span class="token parameter">meat<span class="token punctuation">,</span>produce</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Amikor ezt a függvényt hívod, adatokat (argumentumokat) adsz meg azokon a helyeken, ahol a függvénydefiníciónak paraméterei vannak. Vedd figyelembe, hogy a függvénynek átadott argumentumokat ugyanabban a sorrendben kell felsorolni, mint a függvénydefinícióban szereplő paramétereket:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">myTacos</span><span class="token punctuation">(</span><span class="token string">&quot;beef&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A függvénynek átadott értékek lesznek a függvényen belüli helyi változók értékei, és megkapják a függvény paramétereinek nevét.</p><p>A myTacos függvényt, hogy a két argumentum értékét kiírja a konzolra. Az argumentum átadása olyan, mintha egy <code>var</code> utasítást használnánk a függvényen belül, azzal a különbséggel, hogy az értékek a függvényen kívülről is származhatnak.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myTacos</span><span class="token punctuation">(</span><span class="token parameter">meat<span class="token punctuation">,</span> produce</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// writes &quot;beef&quot;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>produce<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// writes &quot;onions&quot; </span>
<span class="token punctuation">}</span>

<span class="token function">myTacos</span><span class="token punctuation">(</span><span class="token string">&quot;beef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Megjegyzés</p><p>Egy függvénydefinícióban legfeljebb 255 paramétert adhatsz meg. Azonban nagyon ritka, hogy olyan függvényt kelljen írni, amely közel ennyi paramétert vesz fel! Csak a kódod tisztán és áttekinthetően tartása érdekében, ha úgy találod, hogy sok paraméterre van szükséged, érdemes elgondolkodnod azon, hogy van-e jobb megoldás.</p></div><h3 id="argumentumok-atadasa-ertekkel" tabindex="-1"><a class="header-anchor" href="#argumentumok-atadasa-ertekkel" aria-hidden="true">#</a> Argumentumok átadása értékkel</h3><p>Ha egy primitív adattípusú változót használsz az argumentum átadásához, az argumentum érték szerint adódik át. Ez azt jelenti, hogy a függvényen belül létrehozott új változó teljesen elkülönül az argumentum átadásához használt változótól, és bármi történik is az érték függvénybe kerülése után, a függvényen kívüli változó nem változik.</p><div class="hint-container danger"><p class="hint-container-title">Fontos❗</p><p>A JavaScript primitív adattípusai a <code>string</code>, a <code>number</code>, a <code>Boolean</code>, a <code>undefined</code> és a <code>null</code>.</p></div><p>Láthatjuk, hogy több változót hozunk létre, értékeket adunk nekik, majd átadjuk őket egy függvénynek. Ebben az esetben a függvény paramétereinek ugyanazok a nevei, mint az argumentumok átadásához használt változóknak. Bár a függvényen belüli változók értékei megváltoznak, az eredeti változók értékei ugyanazok maradnak.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Arguments Passed By Value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token doc-comment comment">/**
       * Increments two numbers
       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">number1</span>
       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">number2</span>
       */</span>
      <span class="token keyword">function</span> <span class="token function">addToMyNumbers</span><span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        number1<span class="token operator">++</span><span class="token punctuation">;</span>
        number2<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;number 1: &quot;</span> <span class="token operator">+</span> number1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;number 2: &quot;</span> <span class="token operator">+</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">var</span> number1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> number2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

      <span class="token function">addToMyNumbers</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pass the arguments</span>

      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;original number1: &quot;</span> <span class="token operator">+</span> number1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;original number2: &quot;</span> <span class="token operator">+</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Kimenete:</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>number 1: 4
number 2: 13
original number1: 3
original number2: 12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="argumentumok-atadasa-hivatkozassal" tabindex="-1"><a class="header-anchor" href="#argumentumok-atadasa-hivatkozassal" aria-hidden="true">#</a> Argumentumok átadása hivatkozással</h3><p>Míg a JavaScript primitív változókat (karakterláncok, számok, Boolean, undefined és null) értékkel adjuk át a függvényeknek, addig a JavaScript objektumokat hivatkozással adjuk át. Ez azt jelenti, hogy ha egy objektumot adsz át argumentumként egy függvénynek, akkor az objektum függvényen belüli bármilyen módosítása a függvényen kívüli értékét is megváltoztatja. A hivatkozással történő átadás következményei és felhasználási lehetőségei meghaladják e fejezet kereteit, de a 8. fejezetben tárgyaljuk őket.</p><h3 id="egy-fuggveny-hivasa-az-osszes-argumentumok-nelkul" tabindex="-1"><a class="header-anchor" href="#egy-fuggveny-hivasa-az-osszes-argumentumok-nelkul" aria-hidden="true">#</a> Egy függvény hívása az összes argumentumok nélkül</h3><p>Nem kell mindig ugyanannyi paraméterrel hívni egy függvényt, mint amennyi a függvény definíciójában szerepel. Ha egy függvénydefiníció három paramétert tartalmaz, de csak kettővel hívod meg, a harmadik paraméter egy meghatározatlan értékű változót hoz létre a függvényben.</p><h3 id="alapertelmezett-parameterertekek-beallitasa" tabindex="-1"><a class="header-anchor" href="#alapertelmezett-parameterertekek-beallitasa" aria-hidden="true">#</a> Alapértelmezett paraméterértékek beállítása</h3><p>Ha azt szeretnéd, hogy az argumentumok alapértelmezett értéke ne legyen definiálatlan, akkor beállíthatsz alapértelmezett értékeket. A legszélesebb körben támogatott és általánosan elfogadott módja ennek az, hogy a függvény értékén belül teszteled az argumentumokat, és alapértelmezett értékeket állítasz be, ha az argumentum adattípusa meghatározatlan.</p><p>A példában a függvény egy paramétert vesz fel. A függvényen belül teszteléssel ellenőrizzük, hogy az argumentum nem definiálatlan. Ha igen, akkor alapértelmezett értéket kap.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token parameter">yourName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> yourName <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    yourName <span class="token operator">=</span> <span class="token string">&quot;friend&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A JavaScript, ECMAScript 6 nevű verziójában lehetőségünk lesz a függvényfejben lévő paraméterek alapértelmezett értékeinek beállítására.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">welcome</span><span class="token punctuation">(</span>yourName <span class="token operator">=</span> <span class="token string">&quot;friend&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,&quot;</span> <span class="token operator">+</span> yourName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy függvény hívása több argumentummal mint paraméterrel</p><p>Ha egy függvényt a paraméterek számánál több argumentummal hívunk meg, a további argumentumokhoz nem jönnek létre helyi változók, mivel a függvény nem tudja, hogyan hívja őket.</p><p>Van egy ügyes trükk, amivel lekérdezhetjük a függvénynek átadott, de megfelelő paraméterrel nem rendelkező argumentumok értékeit: az Argument-objektum.</p><h3 id="bevezetes-az-argumentumokba-az-argumentum-objektel" tabindex="-1"><a class="header-anchor" href="#bevezetes-az-argumentumokba-az-argumentum-objektel" aria-hidden="true">#</a> Bevezetés az argumentumokba az argumentum objektel</h3><p>Ha nem tudjuk, hogy hány argumentumot adunk át egy függvénybe, akkor a JavaScript által a függvényekbe beépített argumentumobjektummal az összes argumentumot lekérdezhetjük és felhasználhatjuk.</p><p>Az Arguments objektum a függvénynek átadott összes argumentumot tartalmazó tömböt tartalmazza. A tömbön való végighaladással (a for ciklus vagy a for ... in ciklus segítségével) minden argumentumot felhasználhatunk, még akkor is, ha az argumentumok száma a függvény meghívásakor változhat.</p><p>A példában az Arguments objektum használatát mutatja be egy üdvözlő üzenet bemutatására egy két középső névvel rendelkező és egy egy középső névvel rendelkező személy számára.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Welcome Message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">flexibleWelcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> welcome <span class="token operator">=</span> <span class="token string">&quot;Welcome,&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          welcome <span class="token operator">=</span> welcome <span class="token operator">+</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> welcome<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">flexibleWelcome</span><span class="token punctuation">(</span><span class="token string">&quot;Christopher&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Phoenix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Minnick&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">flexibleWelcome</span><span class="token punctuation">(</span><span class="token string">&quot;Eva &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ann &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Holland&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="funkcio-hatokor" tabindex="-1"><a class="header-anchor" href="#funkcio-hatokor" aria-hidden="true">#</a> Funkció hatókör</h3><p>A függvényen belül argumentumok átadásával vagy a var kulcsszó használatával létrehozott változók csak az adott függvényen belül állnak rendelkezésre. A programozók a JavaScript függvény hatókörének nevezik ezt a tulajdonságot. A függvényen belül létrehozott változók a függvény kilépésekor megsemmisülnek.</p><p>Ha azonban függvényen belül hozol létre változót a var kulcsszó használata nélkül, akkor az a változó globális változóvá válik, és a programban bárhol módosítható és elérhető.</p><p>A globális változók véletlen létrehozása számos JavaScript-hiba és -hiba forrása, ezért ajánlott, hogy a változókat mindig megfelelően határold le, és soha ne hozz létre globális változót, hacsak nem feltétlenül szükséges.</p><h3 id="nevtelen-funkcio" tabindex="-1"><a class="header-anchor" href="#nevtelen-funkcio" aria-hidden="true">#</a> Névtelen funkció</h3><p>A függvényfej függvénynév része nem szükséges, és létrehozhatsz név nélküli függvényeket is. Ez furcsa dolognak tűnhet, mert egy név nélküli függvény olyan, mint egy kutya név nélkül; nem tudod hívni! Az <strong>anonim</strong> függvényeket azonban létrehozásukkor hozzárendelhetjük változókhoz, ami ugyanazokat a lehetőségeket nyújtja, mintha a függvényfejben nevet használnánk:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">doTheThing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thingToDo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;I will do this thing: &quot;</span> <span class="token operator">+</span> thingToDo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="a-kulonbsegek-ismerete-a-nevtelen-es-nev-nelkuli-fuggvenyek-kozott" tabindex="-1"><a class="header-anchor" href="#a-kulonbsegek-ismerete-a-nevtelen-es-nev-nelkuli-fuggvenyek-kozott" aria-hidden="true">#</a> A különbségek ismerete a névtelen és név nélküli függvények között</h3><p>Van néhány fontos és néha hasznos különbség egy nevesített függvény létrehozása és egy névtelen függvény hozzárendelése egy változóhoz. Az első az, hogy a változóhoz rendelt névtelen függvény csak akkor létezik, és csak akkor hívható meg, ha a program végrehajtja a hozzárendelést. A megnevezett függvények a programban bárhol elérhetők.</p><p>A második különbség a megnevezett függvények és a változókhoz rendelt névtelen függvények között az, hogy bármikor megváltoztathatjuk egy változó értékét, és más függvényt rendelhetünk hozzá. Ez teszi a változókhoz rendelt névtelen függvényeket rugalmasabbá, mint a megnevezett függvényeket.</p><h3 id="onvegrehajto-anonim-fuggvenyek" tabindex="-1"><a class="header-anchor" href="#onvegrehajto-anonim-fuggvenyek" aria-hidden="true">#</a> Önvégrehajtó anonim függvények</h3><p>Az <strong>anonim</strong> függvények másik felhasználási módja az önvégző függvények. Az önvégző anonim függvény olyan függvény, amely a létrehozását követően azonnal végrehajtódik.</p><p>Ahhoz, hogy egy normál névtelen függvényt önvégző függvénnyé alakítsunk, egyszerűen zárójelekbe kell zárnunk a névtelen függvényt, és egy zárójelet és pontosvesszőt kell utána tennünk.</p><p>Az önvégző névtelen függvények használatának előnye, hogy a bennük létrehozott változók a függvény kilépésével megsemmisülnek. Ily módon elkerülhetjük a változónevek közötti konfliktusokat, és elkerülhetjük, hogy a változókat a memóriában tartsuk, miután már nincs rájuk szükség. A következő kód bemutatja, hogyan írhatunk és használhatunk önvégrehajtó névtelen függvényeket.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myVariable <span class="token operator">=</span> <span class="token string">&quot;I live outside the function.&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> myVariable <span class="token operator">=</span> <span class="token string">&quot;I live in this anonymous function&quot;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>myVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>myVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Kimenete:</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>I live in this anonymous function
I live outside the function.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A webes alkalmazások programozói rendszeresen használnak névtelen függvényeket, hogy a weboldalakon a legkülönfélébb modern hatásokat érjék el.</p><h3 id="csinald-ujra-rekurzioval" tabindex="-1"><a class="header-anchor" href="#csinald-ujra-rekurzioval" aria-hidden="true">#</a> Csináld újra rekurzióval</h3><p>A függvényeket hívhatjuk a függvényen kívülről vagy más függvényeken belülről. Még egy függvényt is meghívhatsz önmagán belülről. Amikor egy függvény önmagát hívja meg, akkor egy rekurziónak nevezett programozási technikát használ.</p><p>A rekurziót sok olyan esetben használhatod, mint a ciklusokat, azzal a különbséggel, hogy a rekurzió a függvényen belüli utasításokat ismétli meg.</p><p>Ennek a rekurzív függvénynek azonban van egy nagy problémája. Felismered?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">squareItUp</span><span class="token punctuation">(</span><span class="token parameter">startingNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> square <span class="token operator">=</span> startingNumber <span class="token operator">*</span> startingNumber<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">squareItUp</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Látod a problémát ezzel a funkcióval? Soha nem ér véget. Addig szorozza a számokat, amíg le nem állítod.</p><p>Ha ezt a funkciót futtatod, valószínűleg összeomlik a böngésződ, ha nem is a számítógéped. Maradandó kárt persze nem okoz, de elég, ha csak elolvasod a kódot, és észreveszed az itt lévő problémát.</p><p>A következő kód a <code>squareItUp()</code> függvényt továbbfejleszti az úgynevezett alapeset megadásával. Az alapeset az a feltétel, amely mellett egy rekurzív függvénynek vége a feladatának, és meg kell állnia. Minden rekurzív függvénynek rendelkeznie kell egy alapesettel.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">squareItUp</span><span class="token punctuation">(</span><span class="token parameter">startingNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    square <span class="token operator">=</span> startingNumber <span class="token operator">*</span> startingNumber<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>square <span class="token operator">&gt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">squareItUp</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Így már jobb! De ennek a funkciónak még mindig van egy nagy problémája. Mi van akkor, ha valaki negatív számot, nullát vagy 1-et ad be? Bármelyik eset eredménye még mindig egy végtelen ciklus lenne. Hogy megvédjük magunkat az ilyen helyzetektől, szükségünk van egy befejezési feltételre. A most következő kódban már egy olyan ellenőrzést adtunk hozzá, amely biztosítja, hogy az argumentum nem kisebb vagy egyenlő 1-nél, és nem más, mint egy szám. Mindkét esetben a függvény azonnal leáll.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">squareItUp</span><span class="token punctuation">(</span><span class="token parameter">startingNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Termination conditions, invalid input </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> startingNumber <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>startingNumber <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// exit the function</span>
    <span class="token punctuation">}</span>

    square <span class="token operator">=</span> staringNumber <span class="token operator">*</span> startingNumber<span class="token punctuation">;</span>

    <span class="token comment">//Base condition</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>square <span class="token operator">&gt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the final value</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// If the base condition isn&#39;t met, do it</span>
        again<span class="token punctuation">.</span><span class="token function">squareItUp</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="funkciok-a-funkciokban" tabindex="-1"><a class="header-anchor" href="#funkciok-a-funkciokban" aria-hidden="true">#</a> Funkciók a funkciókban</h3><p>A függvények függvényeken belül is deklarálhatók. A lenti kód bemutatja, hogyan működik ez a technika, és hogyan befolyásolja a függvényeken belül létrehozott változók hatókörét.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">turnIntoAMartian</span><span class="token punctuation">(</span><span class="token parameter">myName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">recallName</span><span class="token punctuation">(</span><span class="token parameter">myName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> martianName <span class="token operator">=</span> myName <span class="token operator">+</span> <span class="token string">&quot; Martian&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">recallName</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>martianName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az előző példa azt mutatja, hogy a függvények függvényen belüli egymásba ágyazása hogyan hoz létre egy újabb hatókörréteget. A belső függvényben létrehozott változók nem közvetlenül elérhetők a tartalmazó függvény számára. Ahhoz, hogy megkapjuk az értéküket, szükség van egy <code>return</code> utasításra.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">turnIntoAMartian</span><span class="token punctuation">(</span><span class="token parameter">myName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">recallName</span><span class="token punctuation">(</span><span class="token parameter">myName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> martianName <span class="token operator">=</span> myName <span class="token operator">+</span> <span class="token string">&quot; Martian&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> martianName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> martianName <span class="token operator">=</span> <span class="token function">recallName</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>martianName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,143),o=[p];function l(i,c){return a(),s("div",null,o)}const k=n(t,[["render",l],["__file","lesson7.html.vue"]]);export{k as default};
